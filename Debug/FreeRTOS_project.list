
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce8  08006ce8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf0  08006cf0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf0  08006cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e88  20000078  08006d70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f00  08006d70  00022f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013784  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c37  00000000  00000000  0003382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00036468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00037628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e5  00000000  00000000  000386e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013805  00000000  00000000  00050cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097cc5  00000000  00000000  000644ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc18f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  000fc1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bb8 	.word	0x08006bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006bb8 	.word	0x08006bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <day_fibonaci>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t day_fibonaci(uint32_t i)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
   if(i == 0)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <day_fibonaci+0x12>
   {
      return 0;
 8000592:	2300      	movs	r3, #0
 8000594:	e011      	b.n	80005ba <day_fibonaci+0x36>
   }
   if(i == 1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d101      	bne.n	80005a0 <day_fibonaci+0x1c>
   {
      return 1;
 800059c:	2301      	movs	r3, #1
 800059e:	e00c      	b.n	80005ba <day_fibonaci+0x36>
   }
   return day_fibonaci(i-1) + day_fibonaci(i-2);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffed 	bl	8000584 <day_fibonaci>
 80005aa:	4604      	mov	r4, r0
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3b02      	subs	r3, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffe7 	bl	8000584 <day_fibonaci>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4423      	add	r3, r4
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd90      	pop	{r4, r7, pc}

080005c2 <day_fibonaci2>:

uint32_t day_fibonaci2(uint32_t i)
{
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
   if(i == 0)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <day_fibonaci2+0x12>
   {
      return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e011      	b.n	80005f8 <day_fibonaci2+0x36>
   }
   if(i == 1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d101      	bne.n	80005de <day_fibonaci2+0x1c>
   {
      return 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	e00c      	b.n	80005f8 <day_fibonaci2+0x36>
   }
   return day_fibonaci2(i-1) + day_fibonaci2(i-2);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ffed 	bl	80005c2 <day_fibonaci2>
 80005e8:	4604      	mov	r4, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffe7 	bl	80005c2 <day_fibonaci2>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4423      	add	r3, r4
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}

08000600 <day_fibonaci3>:

uint32_t day_fibonaci3(uint32_t i)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
   if(i == 0)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <day_fibonaci3+0x12>
   {
      return 0;
 800060e:	2300      	movs	r3, #0
 8000610:	e011      	b.n	8000636 <day_fibonaci3+0x36>
   }
   if(i == 1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d101      	bne.n	800061c <day_fibonaci3+0x1c>
   {
      return 1;
 8000618:	2301      	movs	r3, #1
 800061a:	e00c      	b.n	8000636 <day_fibonaci3+0x36>
   }
   return day_fibonaci3(i-1) + day_fibonaci3(i-2);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffed 	bl	8000600 <day_fibonaci3>
 8000626:	4604      	mov	r4, r0
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b02      	subs	r3, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffe7 	bl	8000600 <day_fibonaci3>
 8000632:	4603      	mov	r3, r0
 8000634:	4423      	add	r3, r4
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bd90      	pop	{r4, r7, pc}

0800063e <day_fibonaci4>:

uint32_t day_fibonaci4(uint32_t i)
{
 800063e:	b590      	push	{r4, r7, lr}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
   if(i == 0)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <day_fibonaci4+0x12>
   {
      return 0;
 800064c:	2300      	movs	r3, #0
 800064e:	e011      	b.n	8000674 <day_fibonaci4+0x36>
   }
   if(i == 1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <day_fibonaci4+0x1c>
   {
      return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e00c      	b.n	8000674 <day_fibonaci4+0x36>
   }
   return day_fibonaci4(i-1) + day_fibonaci4(i-2);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3b01      	subs	r3, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffed 	bl	800063e <day_fibonaci4>
 8000664:	4604      	mov	r4, r0
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3b02      	subs	r3, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffe7 	bl	800063e <day_fibonaci4>
 8000670:	4603      	mov	r3, r0
 8000672:	4423      	add	r3, r4
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <day_fibonaci5>:

uint32_t day_fibonaci5(uint32_t i)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
   if(i == 0)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <day_fibonaci5+0x12>
   {
      return 0;
 800068a:	2300      	movs	r3, #0
 800068c:	e011      	b.n	80006b2 <day_fibonaci5+0x36>
   }
   if(i == 1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d101      	bne.n	8000698 <day_fibonaci5+0x1c>
   {
      return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e00c      	b.n	80006b2 <day_fibonaci5+0x36>
   }
   return day_fibonaci5(i-1) + day_fibonaci5(i-2);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3b01      	subs	r3, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffed 	bl	800067c <day_fibonaci5>
 80006a2:	4604      	mov	r4, r0
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b02      	subs	r3, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffe7 	bl	800067c <day_fibonaci5>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4423      	add	r3, r4
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
	...

080006bc <get_used_ram_size>:

size_t get_used_ram_size(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
	uint32_t task1Stack = uxTaskGetStackHighWaterMark(task1_handle);
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <get_used_ram_size+0x78>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f9be 	bl	8004a48 <uxTaskGetStackHighWaterMark>
 80006cc:	61f8      	str	r0, [r7, #28]
	uint32_t task2Stack = uxTaskGetStackHighWaterMark(task2_handle);
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <get_used_ram_size+0x7c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f9b8 	bl	8004a48 <uxTaskGetStackHighWaterMark>
 80006d8:	61b8      	str	r0, [r7, #24]
	uint32_t task3Stack = uxTaskGetStackHighWaterMark(task3_handle);
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <get_used_ram_size+0x80>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f9b2 	bl	8004a48 <uxTaskGetStackHighWaterMark>
 80006e4:	6178      	str	r0, [r7, #20]
	uint32_t task4Stack = uxTaskGetStackHighWaterMark(task4_handle);
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <get_used_ram_size+0x84>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f9ac 	bl	8004a48 <uxTaskGetStackHighWaterMark>
 80006f0:	6138      	str	r0, [r7, #16]
	uint32_t task5Stack = uxTaskGetStackHighWaterMark(task5_handle);
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <get_used_ram_size+0x88>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 f9a6 	bl	8004a48 <uxTaskGetStackHighWaterMark>
 80006fc:	60f8      	str	r0, [r7, #12]

	uint32_t remainStack = (5 * configMINIMAL_STACK_SIZE) - (task1Stack + task2Stack + task3Stack + task4Stack + task5Stack); // + task6Stack + task7Stack);
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	441a      	add	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	441a      	add	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	441a      	add	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 8000714:	3302      	adds	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]

	/* Calculate the total RAM used by the application */
	size_t xFreeHeapSize = xPortGetFreeHeapSize();
 8000718:	f005 f9b6 	bl	8005a88 <xPortGetFreeHeapSize>
 800071c:	6078      	str	r0, [r7, #4]
	size_t xRamUsed = configTOTAL_HEAP_SIZE - xFreeHeapSize + remainStack;
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8000728:	603b      	str	r3, [r7, #0]

    return xRamUsed;
 800072a:	683b      	ldr	r3, [r7, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d8 	.word	0x200000d8
 8000738:	200000dc 	.word	0x200000dc
 800073c:	200000e0 	.word	0x200000e0
 8000740:	200000e4 	.word	0x200000e4
 8000744:	200000e8 	.word	0x200000e8

08000748 <vTimerCallback>:

void vTimerCallback( TimerHandle_t xTimer )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b090      	sub	sp, #64	; 0x40
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t byPayload[12] = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
	uint32_t ramUsed = get_used_ram_size();
 800075e:	f7ff ffad 	bl	80006bc <get_used_ram_size>
 8000762:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t tickTime = HAL_GetTick();
 8000764:	f000 feaa 	bl	80014bc <HAL_GetTick>
 8000768:	6338      	str	r0, [r7, #48]	; 0x30

	// In log ra App sử dụng UART interface
	// Kiểu dữ liệu của các tham số countTotal, ramUsed, tickTime là 32 bit sắp xếp dữ liệu theo dạng Big Endiance
	byPayload[0] = (countTotal >> 24) & 0xFF;
 800076a:	4b71      	ldr	r3, [pc, #452]	; (8000930 <vTimerCallback+0x1e8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	0e1b      	lsrs	r3, r3, #24
 8000770:	b2db      	uxtb	r3, r3
 8000772:	733b      	strb	r3, [r7, #12]
	byPayload[1] = (countTotal >> 16) & 0xFF;
 8000774:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <vTimerCallback+0x1e8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
	byPayload[2] = (countTotal >> 8) & 0xFF;
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <vTimerCallback+0x1e8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0a1b      	lsrs	r3, r3, #8
 8000784:	b2db      	uxtb	r3, r3
 8000786:	73bb      	strb	r3, [r7, #14]
	byPayload[3] = (countTotal & 0xFF);
 8000788:	4b69      	ldr	r3, [pc, #420]	; (8000930 <vTimerCallback+0x1e8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	73fb      	strb	r3, [r7, #15]
	byPayload[4] = (ramUsed >> 24) & 0xFF;
 8000790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000792:	0e1b      	lsrs	r3, r3, #24
 8000794:	b2db      	uxtb	r3, r3
 8000796:	743b      	strb	r3, [r7, #16]
	byPayload[5] = (ramUsed >> 16) & 0xFF;
 8000798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	b2db      	uxtb	r3, r3
 800079e:	747b      	strb	r3, [r7, #17]
	byPayload[6] = (ramUsed >> 8) & 0xFF;
 80007a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	74bb      	strb	r3, [r7, #18]
	byPayload[7] = (ramUsed & 0xFF);
 80007a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	74fb      	strb	r3, [r7, #19]
	byPayload[8] = (tickTime >> 24) & 0xFF;
 80007ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b0:	0e1b      	lsrs	r3, r3, #24
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	753b      	strb	r3, [r7, #20]
	byPayload[9] = (tickTime >> 16) & 0xFF;
 80007b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	757b      	strb	r3, [r7, #21]
	byPayload[10] = (tickTime >> 8) & 0xFF;
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	75bb      	strb	r3, [r7, #22]
	byPayload[11] = (tickTime & 0xFF);
 80007c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	75fb      	strb	r3, [r7, #23]
	Serial_SendPacket(CMD_OPT_NOT_USE, CMD_ID_TRACKING_PERFORMANCE, CMD_TYPE_RES, byPayload, sizeof(byPayload));
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	220c      	movs	r2, #12
 80007d2:	9200      	str	r2, [sp, #0]
 80007d4:	2201      	movs	r2, #1
 80007d6:	2190      	movs	r1, #144	; 0x90
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fba7 	bl	8000f2c <Serial_SendPacket>

//	 In log ra màn hình Console
//	printf("c: %ld, r: %ld, t: %ld\n", countTotal, ramUsed, tickTime);

	// Waiting until bit flag delete to set 1
	if ((task1Delete_fg == 1) && (task2Delete_fg == 1) && (task3Delete_fg == 1) && (task4Delete_fg == 1) && (task5Delete_fg == 1))  {
 80007de:	4b55      	ldr	r3, [pc, #340]	; (8000934 <vTimerCallback+0x1ec>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	f040 80a0 	bne.w	8000928 <vTimerCallback+0x1e0>
 80007e8:	4b53      	ldr	r3, [pc, #332]	; (8000938 <vTimerCallback+0x1f0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	f040 809b 	bne.w	8000928 <vTimerCallback+0x1e0>
 80007f2:	4b52      	ldr	r3, [pc, #328]	; (800093c <vTimerCallback+0x1f4>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	f040 8096 	bne.w	8000928 <vTimerCallback+0x1e0>
 80007fc:	4b50      	ldr	r3, [pc, #320]	; (8000940 <vTimerCallback+0x1f8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f040 8091 	bne.w	8000928 <vTimerCallback+0x1e0>
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <vTimerCallback+0x1fc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	f040 808c 	bne.w	8000928 <vTimerCallback+0x1e0>
		BaseType_t status;

		// Đặt lại cờ báo hiệu về chưa xóa task
		task1Delete_fg = 0;
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <vTimerCallback+0x1ec>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
		task2Delete_fg = 0;
 8000816:	4b48      	ldr	r3, [pc, #288]	; (8000938 <vTimerCallback+0x1f0>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
		task3Delete_fg = 0;
 800081c:	4b47      	ldr	r3, [pc, #284]	; (800093c <vTimerCallback+0x1f4>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		task4Delete_fg = 0;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <vTimerCallback+0x1f8>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		task5Delete_fg = 0;
 8000828:	4b46      	ldr	r3, [pc, #280]	; (8000944 <vTimerCallback+0x1fc>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

		// Tạo lại các task khi đã xóa xong
		status = xTaskCreate(task1_handler, "Task_1", configMINIMAL_STACK_SIZE, NULL, 2, &task1_handle);
 800082e:	4b46      	ldr	r3, [pc, #280]	; (8000948 <vTimerCallback+0x200>)
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2302      	movs	r3, #2
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	2282      	movs	r2, #130	; 0x82
 800083a:	4944      	ldr	r1, [pc, #272]	; (800094c <vTimerCallback+0x204>)
 800083c:	4844      	ldr	r0, [pc, #272]	; (8000950 <vTimerCallback+0x208>)
 800083e:	f003 f9ad 	bl	8003b9c <xTaskCreate>
 8000842:	62f8      	str	r0, [r7, #44]	; 0x2c

		// Kiểm tra trạng thái của task có được tạo thành công trên heap hay không?
		configASSERT(status == pdPASS);
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	2b01      	cmp	r3, #1
 8000848:	d00a      	beq.n	8000860 <vTimerCallback+0x118>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084e:	f383 8811 	msr	BASEPRI, r3
 8000852:	f3bf 8f6f 	isb	sy
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800085c:	bf00      	nop
 800085e:	e7fe      	b.n	800085e <vTimerCallback+0x116>

		status = xTaskCreate(task2_handler, "Task_2", configMINIMAL_STACK_SIZE, NULL, 2, &task2_handle);
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <vTimerCallback+0x20c>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2302      	movs	r3, #2
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2300      	movs	r3, #0
 800086a:	2282      	movs	r2, #130	; 0x82
 800086c:	493a      	ldr	r1, [pc, #232]	; (8000958 <vTimerCallback+0x210>)
 800086e:	483b      	ldr	r0, [pc, #236]	; (800095c <vTimerCallback+0x214>)
 8000870:	f003 f994 	bl	8003b9c <xTaskCreate>
 8000874:	62f8      	str	r0, [r7, #44]	; 0x2c

		configASSERT(status == pdPASS);
 8000876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000878:	2b01      	cmp	r3, #1
 800087a:	d00a      	beq.n	8000892 <vTimerCallback+0x14a>
        __asm volatile
 800087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000880:	f383 8811 	msr	BASEPRI, r3
 8000884:	f3bf 8f6f 	isb	sy
 8000888:	f3bf 8f4f 	dsb	sy
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800088e:	bf00      	nop
 8000890:	e7fe      	b.n	8000890 <vTimerCallback+0x148>

		status = xTaskCreate(task3_handler, "Task_3", configMINIMAL_STACK_SIZE, NULL, 2, &task3_handle);
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <vTimerCallback+0x218>)
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2302      	movs	r3, #2
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	2282      	movs	r2, #130	; 0x82
 800089e:	4931      	ldr	r1, [pc, #196]	; (8000964 <vTimerCallback+0x21c>)
 80008a0:	4831      	ldr	r0, [pc, #196]	; (8000968 <vTimerCallback+0x220>)
 80008a2:	f003 f97b 	bl	8003b9c <xTaskCreate>
 80008a6:	62f8      	str	r0, [r7, #44]	; 0x2c

		configASSERT(status == pdPASS);
 80008a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00a      	beq.n	80008c4 <vTimerCallback+0x17c>
        __asm volatile
 80008ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	623b      	str	r3, [r7, #32]
    }
 80008c0:	bf00      	nop
 80008c2:	e7fe      	b.n	80008c2 <vTimerCallback+0x17a>

		status = xTaskCreate(task4_handler, "Task_4", configMINIMAL_STACK_SIZE, NULL, 2, &task4_handle);
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <vTimerCallback+0x224>)
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2302      	movs	r3, #2
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	2282      	movs	r2, #130	; 0x82
 80008d0:	4927      	ldr	r1, [pc, #156]	; (8000970 <vTimerCallback+0x228>)
 80008d2:	4828      	ldr	r0, [pc, #160]	; (8000974 <vTimerCallback+0x22c>)
 80008d4:	f003 f962 	bl	8003b9c <xTaskCreate>
 80008d8:	62f8      	str	r0, [r7, #44]	; 0x2c

		configASSERT(status == pdPASS);
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d00a      	beq.n	80008f6 <vTimerCallback+0x1ae>
        __asm volatile
 80008e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e4:	f383 8811 	msr	BASEPRI, r3
 80008e8:	f3bf 8f6f 	isb	sy
 80008ec:	f3bf 8f4f 	dsb	sy
 80008f0:	61fb      	str	r3, [r7, #28]
    }
 80008f2:	bf00      	nop
 80008f4:	e7fe      	b.n	80008f4 <vTimerCallback+0x1ac>

		status = xTaskCreate(task5_handler, "Task_5", configMINIMAL_STACK_SIZE, NULL, 2, &task5_handle);
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <vTimerCallback+0x230>)
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2302      	movs	r3, #2
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2282      	movs	r2, #130	; 0x82
 8000902:	491e      	ldr	r1, [pc, #120]	; (800097c <vTimerCallback+0x234>)
 8000904:	481e      	ldr	r0, [pc, #120]	; (8000980 <vTimerCallback+0x238>)
 8000906:	f003 f949 	bl	8003b9c <xTaskCreate>
 800090a:	62f8      	str	r0, [r7, #44]	; 0x2c

		configASSERT(status == pdPASS);
 800090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090e:	2b01      	cmp	r3, #1
 8000910:	d00a      	beq.n	8000928 <vTimerCallback+0x1e0>
        __asm volatile
 8000912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000916:	f383 8811 	msr	BASEPRI, r3
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	61bb      	str	r3, [r7, #24]
    }
 8000924:	bf00      	nop
 8000926:	e7fe      	b.n	8000926 <vTimerCallback+0x1de>
	}
}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000f4 	.word	0x200000f4
 8000934:	200000ec 	.word	0x200000ec
 8000938:	200000ed 	.word	0x200000ed
 800093c:	200000ee 	.word	0x200000ee
 8000940:	200000ef 	.word	0x200000ef
 8000944:	200000f0 	.word	0x200000f0
 8000948:	200000d8 	.word	0x200000d8
 800094c:	08006bd0 	.word	0x08006bd0
 8000950:	08000d31 	.word	0x08000d31
 8000954:	200000dc 	.word	0x200000dc
 8000958:	08006bd8 	.word	0x08006bd8
 800095c:	08000d89 	.word	0x08000d89
 8000960:	200000e0 	.word	0x200000e0
 8000964:	08006be0 	.word	0x08006be0
 8000968:	08000de1 	.word	0x08000de1
 800096c:	200000e4 	.word	0x200000e4
 8000970:	08006be8 	.word	0x08006be8
 8000974:	08000e39 	.word	0x08000e39
 8000978:	200000e8 	.word	0x200000e8
 800097c:	08006bf0 	.word	0x08006bf0
 8000980:	08000e91 	.word	0x08000e91

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800098a:	f000 fd61 	bl	8001450 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800098e:	f000 f8cb 	bl	8000b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000992:	f000 f95f 	bl	8000c54 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000996:	f000 f933 	bl	8000c00 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Khởi tạo 5 task bằng lệnh create để đưa data của task vào heap
	status = xTaskCreate(task1_handler, "Task_1", configMINIMAL_STACK_SIZE, NULL, 2, &task1_handle);
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <main+0x158>)
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2302      	movs	r3, #2
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2282      	movs	r2, #130	; 0x82
 80009a6:	494e      	ldr	r1, [pc, #312]	; (8000ae0 <main+0x15c>)
 80009a8:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <main+0x160>)
 80009aa:	f003 f8f7 	bl	8003b9c <xTaskCreate>
 80009ae:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d00a      	beq.n	80009cc <main+0x48>
        __asm volatile
 80009b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ba:	f383 8811 	msr	BASEPRI, r3
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	617b      	str	r3, [r7, #20]
    }
 80009c8:	bf00      	nop
 80009ca:	e7fe      	b.n	80009ca <main+0x46>

	status = xTaskCreate(task2_handler, "Task_2", configMINIMAL_STACK_SIZE, NULL, 2, &task2_handle);
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <main+0x164>)
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	2302      	movs	r3, #2
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2282      	movs	r2, #130	; 0x82
 80009d8:	4944      	ldr	r1, [pc, #272]	; (8000aec <main+0x168>)
 80009da:	4845      	ldr	r0, [pc, #276]	; (8000af0 <main+0x16c>)
 80009dc:	f003 f8de 	bl	8003b9c <xTaskCreate>
 80009e0:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d00a      	beq.n	80009fe <main+0x7a>
        __asm volatile
 80009e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ec:	f383 8811 	msr	BASEPRI, r3
 80009f0:	f3bf 8f6f 	isb	sy
 80009f4:	f3bf 8f4f 	dsb	sy
 80009f8:	613b      	str	r3, [r7, #16]
    }
 80009fa:	bf00      	nop
 80009fc:	e7fe      	b.n	80009fc <main+0x78>

	status = xTaskCreate(task3_handler, "Task_3", configMINIMAL_STACK_SIZE, NULL, 2, &task3_handle);
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <main+0x170>)
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	2302      	movs	r3, #2
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2282      	movs	r2, #130	; 0x82
 8000a0a:	493b      	ldr	r1, [pc, #236]	; (8000af8 <main+0x174>)
 8000a0c:	483b      	ldr	r0, [pc, #236]	; (8000afc <main+0x178>)
 8000a0e:	f003 f8c5 	bl	8003b9c <xTaskCreate>
 8000a12:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d00a      	beq.n	8000a30 <main+0xac>
        __asm volatile
 8000a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	60fb      	str	r3, [r7, #12]
    }
 8000a2c:	bf00      	nop
 8000a2e:	e7fe      	b.n	8000a2e <main+0xaa>

	status = xTaskCreate(task4_handler, "Task_4", configMINIMAL_STACK_SIZE, NULL, 2, &task4_handle);
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <main+0x17c>)
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	2302      	movs	r3, #2
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2282      	movs	r2, #130	; 0x82
 8000a3c:	4931      	ldr	r1, [pc, #196]	; (8000b04 <main+0x180>)
 8000a3e:	4832      	ldr	r0, [pc, #200]	; (8000b08 <main+0x184>)
 8000a40:	f003 f8ac 	bl	8003b9c <xTaskCreate>
 8000a44:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00a      	beq.n	8000a62 <main+0xde>
        __asm volatile
 8000a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	f3bf 8f4f 	dsb	sy
 8000a5c:	60bb      	str	r3, [r7, #8]
    }
 8000a5e:	bf00      	nop
 8000a60:	e7fe      	b.n	8000a60 <main+0xdc>

	status = xTaskCreate(task5_handler, "Task_5", configMINIMAL_STACK_SIZE, NULL, 2, &task5_handle);
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <main+0x188>)
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2302      	movs	r3, #2
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2282      	movs	r2, #130	; 0x82
 8000a6e:	4928      	ldr	r1, [pc, #160]	; (8000b10 <main+0x18c>)
 8000a70:	4828      	ldr	r0, [pc, #160]	; (8000b14 <main+0x190>)
 8000a72:	f003 f893 	bl	8003b9c <xTaskCreate>
 8000a76:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d00a      	beq.n	8000a94 <main+0x110>
        __asm volatile
 8000a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a82:	f383 8811 	msr	BASEPRI, r3
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	f3bf 8f4f 	dsb	sy
 8000a8e:	607b      	str	r3, [r7, #4]
    }
 8000a90:	bf00      	nop
 8000a92:	e7fe      	b.n	8000a92 <main+0x10e>
//	status = xTaskCreate(task7_handler, "Task_7", 200, NULL, 2, &task7_handle);
//
//	configASSERT(status == pdPASS);

	// Tạo ra timer 10ms để in log ra màn hình Console và sửa thành 15ms khi đưa log lên App
	TimerHandle_t xTimer = xTimerCreate( "Timer", pdMS_TO_TICKS( 15 ), pdTRUE, 0, vTimerCallback );
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <main+0x194>)
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	481f      	ldr	r0, [pc, #124]	; (8000b1c <main+0x198>)
 8000aa0:	f004 f98e 	bl	8004dc0 <xTimerCreate>
 8000aa4:	61b8      	str	r0, [r7, #24]
	if( xTimer == NULL ) {}
	xTimerStart( xTimer, 0 );
 8000aa6:	f003 fbd7 	bl	8004258 <xTaskGetTickCount>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	69b8      	ldr	r0, [r7, #24]
 8000ab6:	f004 f9dd 	bl	8004e74 <xTimerGenericCommand>

	// In ra giá trị RAM khi đã khởi các task nhưng các task chưa chạy
	printf("Init c: %ld, r: %ld, t: %ld\n", countTotal, (uint32_t)get_used_ram_size(), (uint32_t)HAL_GetTick());
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <main+0x19c>)
 8000abc:	681c      	ldr	r4, [r3, #0]
 8000abe:	f7ff fdfd 	bl	80006bc <get_used_ram_size>
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	f000 fcfa 	bl	80014bc <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	462a      	mov	r2, r5
 8000acc:	4621      	mov	r1, r4
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <main+0x1a0>)
 8000ad0:	f005 f8d6 	bl	8005c80 <iprintf>

	// start the freeRTOS scheduler
	vTaskStartScheduler();
 8000ad4:	f003 fa64 	bl	8003fa0 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <main+0x154>
 8000ada:	bf00      	nop
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	08006bd0 	.word	0x08006bd0
 8000ae4:	08000d31 	.word	0x08000d31
 8000ae8:	200000dc 	.word	0x200000dc
 8000aec:	08006bd8 	.word	0x08006bd8
 8000af0:	08000d89 	.word	0x08000d89
 8000af4:	200000e0 	.word	0x200000e0
 8000af8:	08006be0 	.word	0x08006be0
 8000afc:	08000de1 	.word	0x08000de1
 8000b00:	200000e4 	.word	0x200000e4
 8000b04:	08006be8 	.word	0x08006be8
 8000b08:	08000e39 	.word	0x08000e39
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	08006bf0 	.word	0x08006bf0
 8000b14:	08000e91 	.word	0x08000e91
 8000b18:	08000749 	.word	0x08000749
 8000b1c:	08006bf8 	.word	0x08006bf8
 8000b20:	200000f4 	.word	0x200000f4
 8000b24:	08006c00 	.word	0x08006c00

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	; 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 f89a 	bl	8005c70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <SystemClock_Config+0xd0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <SystemClock_Config+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2310      	movs	r3, #16
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b94:	2302      	movs	r3, #2
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ba0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000baa:	2307      	movs	r3, #7
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ff0e 	bl	80019d4 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000bbe:	f000 fa63 	bl	8001088 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f970 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000bea:	f000 fa4d 	bl	8001088 <Error_Handler>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f001 fe16 	bl	8002868 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
	{
	Error_Handler();
 8000c42:	f000 fa21 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000094 	.word	0x20000094
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	4812      	ldr	r0, [pc, #72]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000ce0:	f000 fe5e 	bl	80019a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_GPIO_Init+0xd8>)
 8000cfc:	f000 fccc 	bl	8001698 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000d00:	2320      	movs	r3, #32
 8000d02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000d18:	f000 fcbe 	bl	8001698 <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020800 	.word	0x40020800

08000d30 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Thực hiện hàm fibonanci tính toán 20 giá trị
		for (uint32_t i = 0; i < 20; i++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e005      	b.n	8000d4a <task1_handler+0x1a>
		{
			day_fibonaci(i);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fc20 	bl	8000584 <day_fibonaci>
		for (uint32_t i = 0; i < 20; i++)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b13      	cmp	r3, #19
 8000d4e:	d9f6      	bls.n	8000d3e <task1_handler+0xe>
		}
		++countTotal;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <task1_handler+0x48>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <task1_handler+0x48>)
 8000d58:	6013      	str	r3, [r2, #0]
		taskYIELD(); // Dùng để chuyển các task thực hiện
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <task1_handler+0x4c>)
 8000d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	f3bf 8f6f 	isb	sy

		// Xóa task khi đã thực hiện xong dãy fibonanci
		vTaskDelete(task1_handle, &task1Delete_fg);
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <task1_handler+0x50>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4905      	ldr	r1, [pc, #20]	; (8000d84 <task1_handler+0x54>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 f87d 	bl	8003e70 <vTaskDelete>
		for (uint32_t i = 0; i < 20; i++)
 8000d76:	e7df      	b.n	8000d38 <task1_handler+0x8>
 8000d78:	200000f4 	.word	0x200000f4
 8000d7c:	e000ed04 	.word	0xe000ed04
 8000d80:	200000d8 	.word	0x200000d8
 8000d84:	200000ec 	.word	0x200000ec

08000d88 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (uint32_t i = 0; i < 20; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e005      	b.n	8000da2 <task2_handler+0x1a>
		{
			day_fibonaci2(i);
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff fc13 	bl	80005c2 <day_fibonaci2>
		for (uint32_t i = 0; i < 20; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b13      	cmp	r3, #19
 8000da6:	d9f6      	bls.n	8000d96 <task2_handler+0xe>
		}
		++countTotal;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <task2_handler+0x48>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <task2_handler+0x48>)
 8000db0:	6013      	str	r3, [r2, #0]
		taskYIELD();
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <task2_handler+0x4c>)
 8000db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	f3bf 8f4f 	dsb	sy
 8000dbe:	f3bf 8f6f 	isb	sy

		vTaskDelete(task2_handle, &task2Delete_fg);
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <task2_handler+0x50>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <task2_handler+0x54>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 f851 	bl	8003e70 <vTaskDelete>
		for (uint32_t i = 0; i < 20; i++)
 8000dce:	e7df      	b.n	8000d90 <task2_handler+0x8>
 8000dd0:	200000f4 	.word	0x200000f4
 8000dd4:	e000ed04 	.word	0xe000ed04
 8000dd8:	200000dc 	.word	0x200000dc
 8000ddc:	200000ed 	.word	0x200000ed

08000de0 <task3_handler>:
	}
}

static void task3_handler(void* parameters)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (uint32_t i = 0; i < 20; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e005      	b.n	8000dfa <task3_handler+0x1a>
		{
		   day_fibonaci3(i);
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff fc06 	bl	8000600 <day_fibonaci3>
		for (uint32_t i = 0; i < 20; i++)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b13      	cmp	r3, #19
 8000dfe:	d9f6      	bls.n	8000dee <task3_handler+0xe>
		}
		++countTotal;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <task3_handler+0x48>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <task3_handler+0x48>)
 8000e08:	6013      	str	r3, [r2, #0]
		taskYIELD();
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <task3_handler+0x4c>)
 8000e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	f3bf 8f6f 	isb	sy

		vTaskDelete(task3_handle, &task3Delete_fg);
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <task3_handler+0x50>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4905      	ldr	r1, [pc, #20]	; (8000e34 <task3_handler+0x54>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 f825 	bl	8003e70 <vTaskDelete>
		for (uint32_t i = 0; i < 20; i++)
 8000e26:	e7df      	b.n	8000de8 <task3_handler+0x8>
 8000e28:	200000f4 	.word	0x200000f4
 8000e2c:	e000ed04 	.word	0xe000ed04
 8000e30:	200000e0 	.word	0x200000e0
 8000e34:	200000ee 	.word	0x200000ee

08000e38 <task4_handler>:
	}
}

static void task4_handler(void* parameters)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (uint32_t i = 0; i < 20; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e005      	b.n	8000e52 <task4_handler+0x1a>
		{
		   day_fibonaci4(i);
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff fbf9 	bl	800063e <day_fibonaci4>
		for (uint32_t i = 0; i < 20; i++)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b13      	cmp	r3, #19
 8000e56:	d9f6      	bls.n	8000e46 <task4_handler+0xe>
		}
		++countTotal;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <task4_handler+0x48>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <task4_handler+0x48>)
 8000e60:	6013      	str	r3, [r2, #0]
		taskYIELD();
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <task4_handler+0x4c>)
 8000e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	f3bf 8f6f 	isb	sy

		vTaskDelete(task4_handle, &task4Delete_fg);
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <task4_handler+0x50>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4905      	ldr	r1, [pc, #20]	; (8000e8c <task4_handler+0x54>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fff9 	bl	8003e70 <vTaskDelete>
		for (uint32_t i = 0; i < 20; i++)
 8000e7e:	e7df      	b.n	8000e40 <task4_handler+0x8>
 8000e80:	200000f4 	.word	0x200000f4
 8000e84:	e000ed04 	.word	0xe000ed04
 8000e88:	200000e4 	.word	0x200000e4
 8000e8c:	200000ef 	.word	0x200000ef

08000e90 <task5_handler>:
	}
}

static void task5_handler(void* parameters)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (uint32_t i = 0; i < 20; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e005      	b.n	8000eaa <task5_handler+0x1a>
		{
		   day_fibonaci5(i);
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f7ff fbec 	bl	800067c <day_fibonaci5>
		for (uint32_t i = 0; i < 20; i++)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b13      	cmp	r3, #19
 8000eae:	d9f6      	bls.n	8000e9e <task5_handler+0xe>
		}
		++countTotal;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <task5_handler+0x48>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <task5_handler+0x48>)
 8000eb8:	6013      	str	r3, [r2, #0]
		taskYIELD();
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <task5_handler+0x4c>)
 8000ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	f3bf 8f6f 	isb	sy

		vTaskDelete(task5_handle, &task5Delete_fg);
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <task5_handler+0x50>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4905      	ldr	r1, [pc, #20]	; (8000ee4 <task5_handler+0x54>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 ffcd 	bl	8003e70 <vTaskDelete>
		for (uint32_t i = 0; i < 20; i++)
 8000ed6:	e7df      	b.n	8000e98 <task5_handler+0x8>
 8000ed8:	200000f4 	.word	0x200000f4
 8000edc:	e000ed04 	.word	0xe000ed04
 8000ee0:	200000e8 	.word	0x200000e8
 8000ee4:	200000f0 	.word	0x200000f0

08000ee8 <CalculateCheckXOR>:
 * @param  pbyTxBuffer:
           bySizeFrame: Size of frame
 * @retval check_XOR
 */
static uint8_t CalculateCheckXOR(uint8_t *pbyTxBuffer,uint8_t bySizeFrame)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
    uint8_t byCXOR = CXOR_INIT_VAL;
 8000ef4:	23ff      	movs	r3, #255	; 0xff
 8000ef6:	73fb      	strb	r3, [r7, #15]

    for (uint8_t byCntSize = 0; byCntSize < bySizeFrame; byCntSize++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	e00a      	b.n	8000f14 <CalculateCheckXOR+0x2c>
    {
        byCXOR ^= *pbyTxBuffer;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4053      	eors	r3, r2
 8000f06:	73fb      	strb	r3, [r7, #15]
        pbyTxBuffer++;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
    for (uint8_t byCntSize = 0; byCntSize < bySizeFrame; byCntSize++)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73bb      	strb	r3, [r7, #14]
 8000f14:	7bba      	ldrb	r2, [r7, #14]
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d3f0      	bcc.n	8000efe <CalculateCheckXOR+0x16>
    }
    return byCXOR;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <Serial_SendPacket>:
    uint8_t byOption,
    uint8_t byCmdId,
    uint8_t byType,
    uint8_t* pPayload,
    uint8_t byLengthPayload
) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	71bb      	strb	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	717b      	strb	r3, [r7, #5]
    static uint8_t bySeq = 0;
    uint8_t byOffset = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t byBufferTx[CMD_LENGTH_MAX];
    uint8_t checkxor;

    byBufferTx[byOffset++] = FRAME_SOF;
 8000f46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000f50:	3340      	adds	r3, #64	; 0x40
 8000f52:	443b      	add	r3, r7
 8000f54:	22b1      	movs	r2, #177	; 0xb1
 8000f56:	f803 2c38 	strb.w	r2, [r3, #-56]
    byBufferTx[byOffset++] = byLengthPayload + 5; /* Include: opt + id + type + seq + cxor */
 8000f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000f64:	4619      	mov	r1, r3
 8000f66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f6a:	3305      	adds	r3, #5
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000f72:	443b      	add	r3, r7
 8000f74:	f803 2c38 	strb.w	r2, [r3, #-56]
    byBufferTx[byOffset++] = byOption;
 8000f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000f82:	3340      	adds	r3, #64	; 0x40
 8000f84:	443b      	add	r3, r7
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	f803 2c38 	strb.w	r2, [r3, #-56]
    byBufferTx[byOffset++] = byCmdId;
 8000f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000f96:	3340      	adds	r3, #64	; 0x40
 8000f98:	443b      	add	r3, r7
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	f803 2c38 	strb.w	r2, [r3, #-56]
    byBufferTx[byOffset++] = byType;
 8000fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000faa:	3340      	adds	r3, #64	; 0x40
 8000fac:	443b      	add	r3, r7
 8000fae:	797a      	ldrb	r2, [r7, #5]
 8000fb0:	f803 2c38 	strb.w	r2, [r3, #-56]

    for (uint8_t i = 0; i < byLengthPayload; i++) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000fba:	e012      	b.n	8000fe2 <Serial_SendPacket+0xb6>
        byBufferTx[byOffset++] = pPayload[i];
 8000fbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	f887 103f 	strb.w	r1, [r7, #63]	; 0x3f
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	3340      	adds	r3, #64	; 0x40
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f803 2c38 	strb.w	r2, [r3, #-56]
    for (uint8_t i = 0; i < byLengthPayload; i++) {
 8000fd8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000fe2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000fe6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3e6      	bcc.n	8000fbc <Serial_SendPacket+0x90>
    }

    byBufferTx[byOffset++] = bySeq++;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <Serial_SendPacket+0x130>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	b2d1      	uxtb	r1, r2
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <Serial_SendPacket+0x130>)
 8000ff8:	7011      	strb	r1, [r2, #0]
 8000ffa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000ffe:	1c51      	adds	r1, r2, #1
 8001000:	f887 103f 	strb.w	r1, [r7, #63]	; 0x3f
 8001004:	3240      	adds	r2, #64	; 0x40
 8001006:	443a      	add	r2, r7
 8001008:	f802 3c38 	strb.w	r3, [r2, #-56]
    checkxor = CalculateCheckXOR(&byBufferTx[2], byOffset - 2);
 800100c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001010:	3b02      	subs	r3, #2
 8001012:	b2da      	uxtb	r2, r3
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	3302      	adds	r3, #2
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff63 	bl	8000ee8 <CalculateCheckXOR>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    byBufferTx[byOffset++] = checkxor;
 8001028:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8001032:	3340      	adds	r3, #64	; 0x40
 8001034:	443b      	add	r3, r7
 8001036:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800103a:	f803 2c38 	strb.w	r2, [r3, #-56]

    /* Send frame to Host via UART */
    HAL_UART_Transmit(&huart2, byBufferTx, byOffset, HAL_MAX_DELAY);
 800103e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001042:	b29a      	uxth	r2, r3
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <Serial_SendPacket+0x134>)
 800104e:	f001 fc58 	bl	8002902 <HAL_UART_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3740      	adds	r7, #64	; 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000f8 	.word	0x200000f8
 8001060:	20000094 	.word	0x20000094

08001064 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001076:	f000 fa0d 	bl	8001494 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40000c00 	.word	0x40000c00

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12b      	bne.n	800115e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0x88>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x88>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x8c>)
 800115a:	f000 fa9d 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004400 	.word	0x40004400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_InitTick+0xe4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a32      	ldr	r2, [pc, #200]	; (8001258 <HAL_InitTick+0xe4>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_InitTick+0xe4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a0:	f107 0210 	add.w	r2, r7, #16
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f8aa 	bl	8002304 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ba:	f001 f87b 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80011be:	6378      	str	r0, [r7, #52]	; 0x34
 80011c0:	e004      	b.n	80011cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011c2:	f001 f877 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_InitTick+0xe8>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	3b01      	subs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_InitTick+0xec>)
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <HAL_InitTick+0xf0>)
 80011de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_InitTick+0xec>)
 80011e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011e8:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_InitTick+0xec>)
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ec:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_InitTick+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_InitTick+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_InitTick+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001200:	4817      	ldr	r0, [pc, #92]	; (8001260 <HAL_InitTick+0xec>)
 8001202:	f001 f8b1 	bl	8002368 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800120c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001210:	2b00      	cmp	r3, #0
 8001212:	d11b      	bne.n	800124c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <HAL_InitTick+0xec>)
 8001216:	f001 f901 	bl	800241c <HAL_TIM_Base_Start_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001220:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f000 fa27 	bl	800167c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d808      	bhi.n	8001246 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f000 fa03 	bl	8001644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_InitTick+0xf4>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e002      	b.n	800124c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800124c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001250:	4618      	mov	r0, r3
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	431bde83 	.word	0x431bde83
 8001260:	200000fc 	.word	0x200000fc
 8001264:	40000c00 	.word	0x40000c00
 8001268:	20000004 	.word	0x20000004

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM5_IRQHandler+0x10>)
 800129e:	f001 f91f 	bl	80024e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000fc 	.word	0x200000fc

080012ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <ITM_SendChar+0x48>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <ITM_SendChar+0x48>)
 80012bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <ITM_SendChar+0x4c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <ITM_SendChar+0x4c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80012ce:	bf00      	nop
 80012d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f8      	beq.n	80012d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80012de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000edfc 	.word	0xe000edfc
 80012f8:	e0000e00 	.word	0xe0000e00

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffab 	bl	80012ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
  }
  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	605a      	str	r2, [r3, #4]
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:

int _isatty(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f004 fbef 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff faa9 	bl	8000984 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001434:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001440:	08006cf8 	.word	0x08006cf8
  ldr r2, =_sbss
 8001444:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001448:	20012f00 	.word	0x20012f00

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f8d8 	bl	800162e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fe78 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe06 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000144 	.word	0x20000144

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000144 	.word	0x20000144

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff4c 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001656:	f7ff ff61 	bl	800151c <__NVIC_GetPriorityGrouping>
 800165a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f7ff ffb1 	bl	80015c8 <NVIC_EncodePriority>
 8001666:	4602      	mov	r2, r0
 8001668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff80 	bl	8001574 <__NVIC_SetPriority>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff54 	bl	8001538 <__NVIC_EnableIRQ>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e159      	b.n	8001968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8148 	bne.w	8001962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a2 	beq.w	8001962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x202>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x1fe>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x1f6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a45      	ldr	r2, [pc, #276]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x1f2>
 8001886:	2304      	movs	r3, #4
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188a:	2307      	movs	r3, #7
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x204>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_GPIO_Init+0x304>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_GPIO_Init+0x304>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x304>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_GPIO_Init+0x304>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_GPIO_Init+0x304>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_GPIO_Init+0x304>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f aea2 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e267      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d075      	beq.n	8001ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d00c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0a:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d05b      	beq.n	8001adc <HAL_RCC_OscConfig+0x108>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d157      	bne.n	8001adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e242      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x74>
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xb0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6f      	ldr	r2, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6c      	ldr	r2, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xb0>
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fd16 	bl	80014bc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fd12 	bl	80014bc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e207      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xc0>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fd02 	bl	80014bc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fcfe 	bl	80014bc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1f3      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0xe8>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x152>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1c7      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4937      	ldr	r1, [pc, #220]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e03a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x244>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fcb7 	bl	80014bc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fcb3 	bl	80014bc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1a8      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4925      	ldr	r1, [pc, #148]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x244>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc96 	bl	80014bc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc92 	bl	80014bc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e187      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d036      	beq.n	8001c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d016      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x248>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fc76 	bl	80014bc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fc72 	bl	80014bc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e167      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x200>
 8001bf2:	e01b      	b.n	8001c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_OscConfig+0x248>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fc5f 	bl	80014bc <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e00e      	b.n	8001c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7ff fc5b 	bl	80014bc <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d907      	bls.n	8001c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e150      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	42470000 	.word	0x42470000
 8001c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ea      	bne.n	8001c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8097 	beq.w	8001d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b7d      	ldr	r3, [pc, #500]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a7c      	ldr	r2, [pc, #496]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a73      	ldr	r2, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fc1b 	bl	80014bc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fc17 	bl	80014bc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e10c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	e01c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x324>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x30c>
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x324>
 8001ce0:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff fbdc 	bl	80014bc <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff fbd8 	bl	80014bc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0cb      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0ee      	beq.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fbc6 	bl	80014bc <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff fbc2 	bl	80014bc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0b5      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ee      	bne.n	8001d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a1 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d05c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d141      	bne.n	8001e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fb96 	bl	80014bc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fb92 	bl	80014bc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e087      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb6b 	bl	80014bc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fb67 	bl	80014bc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e05c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x416>
 8001e08:	e054      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fb54 	bl	80014bc <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff fb50 	bl	80014bc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e045      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
 8001e36:	e03d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e038      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4ec>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d028      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d121      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d11a      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cc      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d90c      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d044      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e067      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4934      	ldr	r1, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fa82 	bl	80014bc <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff fa7e 	bl	80014bc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e04f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f821 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f882 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00
 8002080:	40023800 	.word	0x40023800
 8002084:	08006c38 	.word	0x08006c38
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b094      	sub	sp, #80	; 0x50
 8002096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
 800209c:	2300      	movs	r3, #0
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a0:	2300      	movs	r3, #0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a8:	4b79      	ldr	r3, [pc, #484]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d00d      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x40>
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	f200 80e1 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x34>
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x3a>
 80020c2:	e0db      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b73      	ldr	r3, [pc, #460]	; (8002294 <HAL_RCC_GetSysClockFreq+0x204>)
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020c8:	e0db      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_GetSysClockFreq+0x208>)
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ce:	e0d8      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d063      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	2200      	movs	r2, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002102:	4622      	mov	r2, r4
 8002104:	462b      	mov	r3, r5
 8002106:	f04f 0000 	mov.w	r0, #0
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002114:	0150      	lsls	r0, r2, #5
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4621      	mov	r1, r4
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	6139      	str	r1, [r7, #16]
 8002120:	4629      	mov	r1, r5
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002134:	4659      	mov	r1, fp
 8002136:	018b      	lsls	r3, r1, #6
 8002138:	4651      	mov	r1, sl
 800213a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213e:	4651      	mov	r1, sl
 8002140:	018a      	lsls	r2, r1, #6
 8002142:	4651      	mov	r1, sl
 8002144:	ebb2 0801 	subs.w	r8, r2, r1
 8002148:	4659      	mov	r1, fp
 800214a:	eb63 0901 	sbc.w	r9, r3, r1
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002162:	4690      	mov	r8, r2
 8002164:	4699      	mov	r9, r3
 8002166:	4623      	mov	r3, r4
 8002168:	eb18 0303 	adds.w	r3, r8, r3
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	462b      	mov	r3, r5
 8002170:	eb49 0303 	adc.w	r3, r9, r3
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002182:	4629      	mov	r1, r5
 8002184:	024b      	lsls	r3, r1, #9
 8002186:	4621      	mov	r1, r4
 8002188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800218c:	4621      	mov	r1, r4
 800218e:	024a      	lsls	r2, r1, #9
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002196:	2200      	movs	r2, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
 800219a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800219c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021a0:	f7fe f86e 	bl	8000280 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4613      	mov	r3, r2
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021ac:	e058      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	2200      	movs	r2, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	4611      	mov	r1, r2
 80021ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021c8:	4642      	mov	r2, r8
 80021ca:	464b      	mov	r3, r9
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	0159      	lsls	r1, r3, #5
 80021d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021da:	0150      	lsls	r0, r2, #5
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4641      	mov	r1, r8
 80021e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021e6:	4649      	mov	r1, r9
 80021e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002200:	ebb2 040a 	subs.w	r4, r2, sl
 8002204:	eb63 050b 	sbc.w	r5, r3, fp
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	00eb      	lsls	r3, r5, #3
 8002212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002216:	00e2      	lsls	r2, r4, #3
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
 800221c:	4643      	mov	r3, r8
 800221e:	18e3      	adds	r3, r4, r3
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	464b      	mov	r3, r9
 8002224:	eb45 0303 	adc.w	r3, r5, r3
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002236:	4629      	mov	r1, r5
 8002238:	028b      	lsls	r3, r1, #10
 800223a:	4621      	mov	r1, r4
 800223c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002240:	4621      	mov	r1, r4
 8002242:	028a      	lsls	r2, r1, #10
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224a:	2200      	movs	r2, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	61fa      	str	r2, [r7, #28]
 8002250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002254:	f7fe f814 	bl	8000280 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4613      	mov	r3, r2
 800225e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	3301      	adds	r3, #1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x204>)
 800227e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002284:	4618      	mov	r0, r3
 8002286:	3750      	adds	r7, #80	; 0x50
 8002288:	46bd      	mov	sp, r7
 800228a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	007a1200 	.word	0x007a1200

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000

080022b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b8:	f7ff fff0 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08006c48 	.word	0x08006c48

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff ffdc 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	08006c48 	.word	0x08006c48

08002304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	220f      	movs	r2, #15
 8002312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_GetClockConfig+0x5c>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_RCC_GetClockConfig+0x5c>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_GetClockConfig+0x5c>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_GetClockConfig+0x5c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_RCC_GetClockConfig+0x60>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40023c00 	.word	0x40023c00

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e041      	b.n	80023fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f839 	bl	8002406 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 f9ca 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e044      	b.n	80024be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d018      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d013      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d111      	bne.n	80024ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d010      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	e007      	b.n	80024bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d122      	bne.n	800253c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d11b      	bne.n	800253c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0202 	mvn.w	r2, #2
 800250c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8ee 	bl	8002704 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8e0 	bl	80026f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8f1 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0204 	mvn.w	r2, #4
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8c4 	bl	8002704 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8b6 	bl	80026f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8c7 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b08      	cmp	r3, #8
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0208 	mvn.w	r2, #8
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f89a 	bl	8002704 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f88c 	bl	80026f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f89d 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0210 	mvn.w	r2, #16
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2208      	movs	r2, #8
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f870 	bl	8002704 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f862 	bl	80026f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f873 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0201 	mvn.w	r2, #1
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fd00 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8e2 	bl	8002854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f838 	bl	800272c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0220 	mvn.w	r2, #32
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8ac 	bl	8002840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a31      	ldr	r2, [pc, #196]	; (8002828 <TIM_Base_SetConfig+0xe8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <TIM_Base_SetConfig+0xec>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <TIM_Base_SetConfig+0xf0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01b      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d017      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <TIM_Base_SetConfig+0xe8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <TIM_Base_SetConfig+0xec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a20      	ldr	r2, [pc, #128]	; (8002830 <TIM_Base_SetConfig+0xf0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <TIM_Base_SetConfig+0xf4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <TIM_Base_SetConfig+0xf8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <TIM_Base_SetConfig+0xfc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d103      	bne.n	8002810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	615a      	str	r2, [r3, #20]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800

08002840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e03f      	b.n	80028fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fc28 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f929 	bl	8002b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b08a      	sub	sp, #40	; 0x28
 8002906:	af02      	add	r7, sp, #8
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	d17c      	bne.n	8002a1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_UART_Transmit+0x2c>
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e075      	b.n	8002a1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_UART_Transmit+0x3e>
 800293c:	2302      	movs	r3, #2
 800293e:	e06e      	b.n	8002a1e <HAL_UART_Transmit+0x11c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	; 0x21
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002956:	f7fe fdb1 	bl	80014bc <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d108      	bne.n	8002984 <HAL_UART_Transmit+0x82>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e003      	b.n	800298c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002994:	e02a      	b.n	80029ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f840 	bl	8002a26 <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e036      	b.n	8002a1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3302      	adds	r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	e007      	b.n	80029de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	3301      	adds	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1cf      	bne.n	8002996 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f810 	bl	8002a26 <UART_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e006      	b.n	8002a1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b090      	sub	sp, #64	; 0x40
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a36:	e050      	b.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d04c      	beq.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a46:	f7fe fd39 	bl	80014bc <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d241      	bcs.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a76:	637a      	str	r2, [r7, #52]	; 0x34
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e5      	bne.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aaa:	623a      	str	r2, [r7, #32]
 8002aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	69f9      	ldr	r1, [r7, #28]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e5      	bne.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e00f      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d09f      	beq.n	8002a38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3740      	adds	r7, #64	; 0x40
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b0c0      	sub	sp, #256	; 0x100
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	ea40 0301 	orr.w	r3, r0, r1
 8002b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b5c:	f021 010c 	bic.w	r1, r1, #12
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	6999      	ldr	r1, [r3, #24]
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	ea40 0301 	orr.w	r3, r0, r1
 8002b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <UART_SetConfig+0x2cc>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d005      	beq.n	8002ba4 <UART_SetConfig+0xa0>
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d104      	bne.n	8002bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff fb9a 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bac:	e003      	b.n	8002bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bae:	f7ff fb81 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc0:	f040 810c 	bne.w	8002ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	462b      	mov	r3, r5
 8002bda:	1891      	adds	r1, r2, r2
 8002bdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bde:	415b      	adcs	r3, r3
 8002be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002be6:	4621      	mov	r1, r4
 8002be8:	eb12 0801 	adds.w	r8, r2, r1
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb43 0901 	adc.w	r9, r3, r1
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c06:	4690      	mov	r8, r2
 8002c08:	4699      	mov	r9, r3
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	eb18 0303 	adds.w	r3, r8, r3
 8002c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c14:	462b      	mov	r3, r5
 8002c16:	eb49 0303 	adc.w	r3, r9, r3
 8002c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c32:	460b      	mov	r3, r1
 8002c34:	18db      	adds	r3, r3, r3
 8002c36:	653b      	str	r3, [r7, #80]	; 0x50
 8002c38:	4613      	mov	r3, r2
 8002c3a:	eb42 0303 	adc.w	r3, r2, r3
 8002c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c48:	f7fd fb1a 	bl	8000280 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002c52:	fba3 2302 	umull	r2, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	011c      	lsls	r4, r3, #4
 8002c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c74:	415b      	adcs	r3, r3
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c82:	4649      	mov	r1, r9
 8002c84:	eb43 0b01 	adc.w	fp, r3, r1
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9c:	4692      	mov	sl, r2
 8002c9e:	469b      	mov	fp, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002caa:	464b      	mov	r3, r9
 8002cac:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	18db      	adds	r3, r3, r3
 8002ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cce:	4613      	mov	r3, r2
 8002cd0:	eb42 0303 	adc.w	r3, r2, r3
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cde:	f7fd facf 	bl	8000280 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002cea:	fba3 2301 	umull	r2, r3, r3, r1
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2264      	movs	r2, #100	; 0x64
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	1acb      	subs	r3, r1, r3
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002d00:	fba3 2302 	umull	r2, r3, r3, r2
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d0c:	441c      	add	r4, r3
 8002d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	1891      	adds	r1, r2, r2
 8002d26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d28:	415b      	adcs	r3, r3
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d30:	4641      	mov	r1, r8
 8002d32:	1851      	adds	r1, r2, r1
 8002d34:	6339      	str	r1, [r7, #48]	; 0x30
 8002d36:	4649      	mov	r1, r9
 8002d38:	414b      	adcs	r3, r1
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d48:	4659      	mov	r1, fp
 8002d4a:	00cb      	lsls	r3, r1, #3
 8002d4c:	4651      	mov	r1, sl
 8002d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d52:	4651      	mov	r1, sl
 8002d54:	00ca      	lsls	r2, r1, #3
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d64:	464b      	mov	r3, r9
 8002d66:	460a      	mov	r2, r1
 8002d68:	eb42 0303 	adc.w	r3, r2, r3
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d84:	460b      	mov	r3, r1
 8002d86:	18db      	adds	r3, r3, r3
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	eb42 0303 	adc.w	r3, r2, r3
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d9a:	f7fd fa71 	bl	8000280 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002da4:	fba3 1302 	umull	r1, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	2164      	movs	r1, #100	; 0x64
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	3332      	adds	r3, #50	; 0x32
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 0207 	and.w	r2, r3, #7
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4422      	add	r2, r4
 8002dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dcc:	e105      	b.n	8002fda <UART_SetConfig+0x4d6>
 8002dce:	bf00      	nop
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40011400 	.word	0x40011400
 8002dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002de6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dee:	4642      	mov	r2, r8
 8002df0:	464b      	mov	r3, r9
 8002df2:	1891      	adds	r1, r2, r2
 8002df4:	6239      	str	r1, [r7, #32]
 8002df6:	415b      	adcs	r3, r3
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dfe:	4641      	mov	r1, r8
 8002e00:	1854      	adds	r4, r2, r1
 8002e02:	4649      	mov	r1, r9
 8002e04:	eb43 0501 	adc.w	r5, r3, r1
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	00eb      	lsls	r3, r5, #3
 8002e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e16:	00e2      	lsls	r2, r4, #3
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	18e3      	adds	r3, r4, r3
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e24:	464b      	mov	r3, r9
 8002e26:	eb45 0303 	adc.w	r3, r5, r3
 8002e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	008b      	lsls	r3, r1, #2
 8002e4e:	4621      	mov	r1, r4
 8002e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e54:	4621      	mov	r1, r4
 8002e56:	008a      	lsls	r2, r1, #2
 8002e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e5c:	f7fd fa10 	bl	8000280 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <UART_SetConfig+0x4e4>)
 8002e66:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	011c      	lsls	r4, r3, #4
 8002e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	61b9      	str	r1, [r7, #24]
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e90:	4641      	mov	r1, r8
 8002e92:	1851      	adds	r1, r2, r1
 8002e94:	6139      	str	r1, [r7, #16]
 8002e96:	4649      	mov	r1, r9
 8002e98:	414b      	adcs	r3, r1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	00cb      	lsls	r3, r1, #3
 8002eac:	4651      	mov	r1, sl
 8002eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	00ca      	lsls	r2, r1, #3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	eb42 0303 	adc.w	r3, r2, r3
 8002ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ee8:	4649      	mov	r1, r9
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	4641      	mov	r1, r8
 8002eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	008a      	lsls	r2, r1, #2
 8002ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002efa:	f7fd f9c1 	bl	8000280 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <UART_SetConfig+0x4e4>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	; 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	; 0x32
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <UART_SetConfig+0x4e4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f22:	441c      	add	r4, r3
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f2c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f32:	4642      	mov	r2, r8
 8002f34:	464b      	mov	r3, r9
 8002f36:	1891      	adds	r1, r2, r2
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	415b      	adcs	r3, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f42:	4641      	mov	r1, r8
 8002f44:	1851      	adds	r1, r2, r1
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	4649      	mov	r1, r9
 8002f4a:	414b      	adcs	r3, r1
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	00cb      	lsls	r3, r1, #3
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f64:	4651      	mov	r1, sl
 8002f66:	00ca      	lsls	r2, r1, #3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4642      	mov	r2, r8
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f74:	464b      	mov	r3, r9
 8002f76:	460a      	mov	r2, r1
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	663b      	str	r3, [r7, #96]	; 0x60
 8002f88:	667a      	str	r2, [r7, #100]	; 0x64
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f96:	4649      	mov	r1, r9
 8002f98:	008b      	lsls	r3, r1, #2
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	008a      	lsls	r2, r1, #2
 8002fa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fa8:	f7fd f96a 	bl	8000280 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <UART_SetConfig+0x4e4>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2164      	movs	r1, #100	; 0x64
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <UART_SetConfig+0x4e4>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4422      	add	r2, r4
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	bf00      	nop
 8002fdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	51eb851f 	.word	0x51eb851f

08002fec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f103 0208 	add.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0208 	add.w	r2, r3, #8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f103 0208 	add.w	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d103      	bne.n	80030ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e00c      	b.n	80030c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3308      	adds	r3, #8
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e002      	b.n	80030bc <vListInsert+0x2e>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d2f6      	bcs.n	80030b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	601a      	str	r2, [r3, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d103      	bne.n	8003134 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800315e:	2301      	movs	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericReset+0x2e>
        __asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60fb      	str	r3, [r7, #12]
    }
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05d      	beq.n	8003244 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d059      	beq.n	8003244 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	2100      	movs	r1, #0
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d000      	beq.n	80031a4 <xQueueGenericReset+0x50>
 80031a2:	2101      	movs	r1, #1
 80031a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d14c      	bne.n	8003244 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80031aa:	f002 fa35 	bl	8005618 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	441a      	add	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2200      	movs	r2, #0
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	3b01      	subs	r3, #1
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	441a      	add	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	22ff      	movs	r2, #255	; 0xff
 80031ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	22ff      	movs	r2, #255	; 0xff
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01a      	beq.n	800323e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3310      	adds	r3, #16
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fa1b 	bl	8004648 <xTaskRemoveFromEventList>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <xQueueGenericReset+0x11c>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	e009      	b.n	800323e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3310      	adds	r3, #16
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fedc 	bl	8002fec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	3324      	adds	r3, #36	; 0x24
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fed7 	bl	8002fec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800323e:	f002 fa1b 	bl	8005678 <vPortExitCritical>
 8003242:	e001      	b.n	8003248 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <xQueueGenericReset+0x110>
        __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	60bb      	str	r3, [r7, #8]
    }
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003264:	697b      	ldr	r3, [r7, #20]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02e      	beq.n	80032ea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800328c:	2100      	movs	r1, #0
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	fba3 2302 	umull	r2, r3, r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d000      	beq.n	800329c <xQueueGenericCreate+0x28>
 800329a:	2101      	movs	r1, #1
 800329c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d123      	bne.n	80032ea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80032aa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80032ae:	d81c      	bhi.n	80032ea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3350      	adds	r3, #80	; 0x50
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 facc 	bl	800585c <pvPortMalloc>
 80032c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01c      	beq.n	8003306 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3350      	adds	r3, #80	; 0x50
 80032d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f814 	bl	8003310 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80032e8:	e00d      	b.n	8003306 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <xQueueGenericCreate+0x92>
        __asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
    }
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003306:	69fb      	ldr	r3, [r7, #28]
    }
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e002      	b.n	8003332 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800333e:	2101      	movs	r1, #1
 8003340:	69b8      	ldr	r0, [r7, #24]
 8003342:	f7ff ff07 	bl	8003154 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003366:	2300      	movs	r3, #0
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <xQueueGenericSend+0x32>
        __asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <xQueueGenericSend+0x40>
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <xQueueGenericSend+0x44>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <xQueueGenericSend+0x46>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xQueueGenericSend+0x60>
        __asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d103      	bne.n	80033c6 <xQueueGenericSend+0x6e>
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <xQueueGenericSend+0x72>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xQueueGenericSend+0x74>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	623b      	str	r3, [r7, #32]
    }
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033e6:	f001 fb77 	bl	8004ad8 <xTaskGetSchedulerState>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <xQueueGenericSend+0x9e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSend+0xa2>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSend+0xa4>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueGenericSend+0xbe>
        __asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61fb      	str	r3, [r7, #28]
    }
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003416:	f002 f8ff 	bl	8005618 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <xQueueGenericSend+0xd4>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d129      	bne.n	8003480 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003432:	f000 fa21 	bl	8003878 <prvCopyDataToQueue>
 8003436:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f8ff 	bl	8004648 <xTaskRemoveFromEventList>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <xQueueGenericSend+0x1f8>)
 8003452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	e00a      	b.n	8003478 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <xQueueGenericSend+0x1f8>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003478:	f002 f8fe 	bl	8005678 <vPortExitCritical>
                return pdPASS;
 800347c:	2301      	movs	r3, #1
 800347e:	e063      	b.n	8003548 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003486:	f002 f8f7 	bl	8005678 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800348a:	2300      	movs	r3, #0
 800348c:	e05c      	b.n	8003548 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f9ab 	bl	80047f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034a2:	f002 f8e9 	bl	8005678 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034a6:	f000 fdcd 	bl	8004044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034aa:	f002 f8b5 	bl	8005618 <vPortEnterCritical>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d103      	bne.n	80034c4 <xQueueGenericSend+0x16c>
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x182>
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034da:	f002 f8cd 	bl	8005678 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034de:	1d3a      	adds	r2, r7, #4
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f99a 	bl	8004820 <xTaskCheckForTimeOut>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d124      	bne.n	800353c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f4:	f000 fab8 	bl	8003a68 <prvIsQueueFull>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d018      	beq.n	8003530 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	3310      	adds	r3, #16
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f001 f834 	bl	8004574 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800350c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350e:	f000 fa43 	bl	8003998 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003512:	f000 fda5 	bl	8004060 <xTaskResumeAll>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f47f af7c 	bne.w	8003416 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <xQueueGenericSend+0x1f8>)
 8003520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	e772      	b.n	8003416 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003532:	f000 fa31 	bl	8003998 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003536:	f000 fd93 	bl	8004060 <xTaskResumeAll>
 800353a:	e76c      	b.n	8003416 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800353c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353e:	f000 fa2b 	bl	8003998 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003542:	f000 fd8d 	bl	8004060 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003546:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003548:	4618      	mov	r0, r3
 800354a:	3738      	adds	r7, #56	; 0x38
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b092      	sub	sp, #72	; 0x48
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8003566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <xQueueGenericSendFromISR+0x3c>
 8003588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <xQueueGenericSendFromISR+0x40>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <xQueueGenericSendFromISR+0x42>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80035ac:	bf00      	nop
 80035ae:	e7fe      	b.n	80035ae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d103      	bne.n	80035be <xQueueGenericSendFromISR+0x6a>
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <xQueueGenericSendFromISR+0x6e>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <xQueueGenericSendFromISR+0x70>
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035de:	f002 f8fd 	bl	80057dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035e2:	f3ef 8211 	mrs	r2, BASEPRI
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80035fa:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <xQueueGenericSendFromISR+0xbc>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d146      	bne.n	800369e <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003616:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800361a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003626:	f000 f927 	bl	8003878 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800362a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d112      	bne.n	800365a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02d      	beq.n	8003698 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	3324      	adds	r3, #36	; 0x24
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f801 	bl	8004648 <xTaskRemoveFromEventList>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d025      	beq.n	8003698 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d022      	beq.n	8003698 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e01e      	b.n	8003698 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800365a:	f000 fe0d 	bl	8004278 <uxTaskGetNumberOfTasks>
 800365e:	6338      	str	r0, [r7, #48]	; 0x30
 8003660:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	429a      	cmp	r2, r3
 8003668:	d916      	bls.n	8003698 <xQueueGenericSendFromISR+0x144>
 800366a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800366e:	2b7f      	cmp	r3, #127	; 0x7f
 8003670:	d10a      	bne.n	8003688 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	61bb      	str	r3, [r7, #24]
    }
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSendFromISR+0x132>
 8003688:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800368c:	3301      	adds	r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	b25a      	sxtb	r2, r3
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 800369c:	e001      	b.n	80036a2 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
 80036a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a4:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036ac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3748      	adds	r7, #72	; 0x48
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xQueueReceive+0x30>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	623b      	str	r3, [r7, #32]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <xQueueReceive+0x3e>
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <xQueueReceive+0x42>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueReceive+0x44>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueReceive+0x5e>
        __asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61fb      	str	r3, [r7, #28]
    }
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003716:	f001 f9df 	bl	8004ad8 <xTaskGetSchedulerState>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueReceive+0x6e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xQueueReceive+0x72>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueReceive+0x74>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xQueueReceive+0x8e>
        __asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61bb      	str	r3, [r7, #24]
    }
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003746:	f001 ff67 	bl	8005618 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375a:	f000 f8f7 	bl	800394c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	3310      	adds	r3, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ff68 	bl	8004648 <xTaskRemoveFromEventList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <xQueueReceive+0x1bc>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800378e:	f001 ff73 	bl	8005678 <vPortExitCritical>
                return pdPASS;
 8003792:	2301      	movs	r3, #1
 8003794:	e069      	b.n	800386a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800379c:	f001 ff6c 	bl	8005678 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e062      	b.n	800386a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f820 	bl	80047f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037b8:	f001 ff5e 	bl	8005678 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037bc:	f000 fc42 	bl	8004044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037c0:	f001 ff2a 	bl	8005618 <vPortEnterCritical>
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x122>
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d103      	bne.n	80037f0 <xQueueReceive+0x138>
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f0:	f001 ff42 	bl	8005678 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037f4:	1d3a      	adds	r2, r7, #4
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f80f 	bl	8004820 <xTaskCheckForTimeOut>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d123      	bne.n	8003850 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380a:	f000 f917 	bl	8003a3c <prvIsQueueEmpty>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fea9 	bl	8004574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 f8b8 	bl	8003998 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003828:	f000 fc1a 	bl	8004060 <xTaskResumeAll>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d189      	bne.n	8003746 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xQueueReceive+0x1bc>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	e780      	b.n	8003746 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f8a7 	bl	8003998 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800384a:	f000 fc09 	bl	8004060 <xTaskResumeAll>
 800384e:	e77a      	b.n	8003746 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003852:	f000 f8a1 	bl	8003998 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003856:	f000 fc03 	bl	8004060 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f8ee 	bl	8003a3c <prvIsQueueEmpty>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f43f af6f 	beq.w	8003746 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003868:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3730      	adds	r7, #48	; 0x30
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d14d      	bne.n	800393a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f936 	bl	8004b14 <xTaskPriorityDisinherit>
 80038a8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	e043      	b.n	800393a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d119      	bne.n	80038ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6858      	ldr	r0, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	461a      	mov	r2, r3
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	f002 f9c6 	bl	8005c54 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d32b      	bcc.n	800393a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	e026      	b.n	800393a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68d8      	ldr	r0, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	461a      	mov	r2, r3
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	f002 f9ac 	bl	8005c54 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	425b      	negs	r3, r3
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d207      	bcs.n	8003928 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	425b      	negs	r3, r3
 8003922:	441a      	add	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d105      	bne.n	800393a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3b01      	subs	r3, #1
 8003938:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003942:	697b      	ldr	r3, [r7, #20]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d303      	bcc.n	8003980 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68d9      	ldr	r1, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	461a      	mov	r2, r3
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f002 f962 	bl	8005c54 <memcpy>
    }
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80039a0:	f001 fe3a 	bl	8005618 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ac:	e011      	b.n	80039d2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d012      	beq.n	80039dc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fe44 	bl	8004648 <xTaskRemoveFromEventList>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80039c6:	f000 ff91 	bl	80048ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dce9      	bgt.n	80039ae <prvUnlockQueue+0x16>
 80039da:	e000      	b.n	80039de <prvUnlockQueue+0x46>
                    break;
 80039dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80039e6:	f001 fe47 	bl	8005678 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80039ea:	f001 fe15 	bl	8005618 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039f6:	e011      	b.n	8003a1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d012      	beq.n	8003a26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3310      	adds	r3, #16
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fe1f 	bl	8004648 <xTaskRemoveFromEventList>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a10:	f000 ff6c 	bl	80048ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dce9      	bgt.n	80039f8 <prvUnlockQueue+0x60>
 8003a24:	e000      	b.n	8003a28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a30:	f001 fe22 	bl	8005678 <vPortExitCritical>
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a44:	f001 fde8 	bl	8005618 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e001      	b.n	8003a5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a5a:	f001 fe0d 	bl	8005678 <vPortExitCritical>

    return xReturn;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a70:	f001 fdd2 	bl	8005618 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d102      	bne.n	8003a86 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a8a:	f001 fdf5 	bl	8005678 <vPortExitCritical>

    return xReturn;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
    }
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d024      	beq.n	8003b12 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e01e      	b.n	8003b0c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003ace:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <vQueueAddToRegistry+0x98>)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d105      	bne.n	8003aea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <vQueueAddToRegistry+0x98>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
                    break;
 8003ae8:	e013      	b.n	8003b12 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <vQueueAddToRegistry+0x6e>
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <vQueueAddToRegistry+0x98>)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <vQueueAddToRegistry+0x98>)
 8003b02:	4413      	add	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b07      	cmp	r3, #7
 8003b10:	d9dd      	bls.n	8003ace <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000148 	.word	0x20000148

08003b34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b44:	f001 fd68 	bl	8005618 <vPortEnterCritical>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d103      	bne.n	8003b5e <vQueueWaitForMessageRestricted+0x2a>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d103      	bne.n	8003b74 <vQueueWaitForMessageRestricted+0x40>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b74:	f001 fd80 	bl	8005678 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd17 	bl	80045bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f7ff ff02 	bl	8003998 <prvUnlockQueue>
    }
 8003b94:	bf00      	nop
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	; 0x30
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fe53 	bl	800585c <pvPortMalloc>
 8003bb6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bbe:	2058      	movs	r0, #88	; 0x58
 8003bc0:	f001 fe4c 	bl	800585c <pvPortMalloc>
 8003bc4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003bcc:	2258      	movs	r2, #88	; 0x58
 8003bce:	2100      	movs	r1, #0
 8003bd0:	69f8      	ldr	r0, [r7, #28]
 8003bd2:	f002 f84d 	bl	8005c70 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
 8003bdc:	e005      	b.n	8003bea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f001 fef6 	bl	80059d0 <vPortFree>
 8003be4:	e001      	b.n	8003bea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	9302      	str	r3, [sp, #8]
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f80e 	bl	8003c28 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c0c:	69f8      	ldr	r0, [r7, #28]
 8003c0e:	f000 f899 	bl	8003d44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e002      	b.n	8003c1e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	21a5      	movs	r1, #165	; 0xa5
 8003c42:	f002 f815 	bl	8005c70 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c50:	3b01      	subs	r3, #1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	617b      	str	r3, [r7, #20]
    }
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01e      	beq.n	8003cc4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e012      	b.n	8003cb2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	7819      	ldrb	r1, [r3, #0]
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	4413      	add	r3, r2
 8003c9a:	3334      	adds	r3, #52	; 0x34
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d006      	beq.n	8003cba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d9e9      	bls.n	8003c8c <prvInitialiseNewTask+0x64>
 8003cb8:	e000      	b.n	8003cbc <prvInitialiseNewTask+0x94>
            {
                break;
 8003cba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d90a      	bls.n	8003ce0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	613b      	str	r3, [r7, #16]
    }
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d901      	bls.n	8003cea <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f996 	bl	800302c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	3318      	adds	r3, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f991 	bl	800302c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	f1c3 0205 	rsb	r2, r3, #5
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	69b8      	ldr	r0, [r7, #24]
 8003d26:	f001 fb45 	bl	80053b4 <pxPortInitialiseStack>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d3c:	bf00      	nop
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d4c:	f001 fc64 	bl	8005618 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d50:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <prvAddNewTaskToReadyList+0x110>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <prvAddNewTaskToReadyList+0x110>)
 8003d58:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <prvAddNewTaskToReadyList+0x114>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d62:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <prvAddNewTaskToReadyList+0x114>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <prvAddNewTaskToReadyList+0x110>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d110      	bne.n	8003d92 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003d70:	f000 fde0 	bl	8004934 <prvInitialiseTaskLists>
 8003d74:	e00d      	b.n	8003d92 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <prvAddNewTaskToReadyList+0x118>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <prvAddNewTaskToReadyList+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d802      	bhi.n	8003d92 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <prvAddNewTaskToReadyList+0x114>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <prvAddNewTaskToReadyList+0x11c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <prvAddNewTaskToReadyList+0x11c>)
 8003d9a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <prvAddNewTaskToReadyList+0x11c>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <prvAddNewTaskToReadyList+0x120>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <prvAddNewTaskToReadyList+0x120>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	492b      	ldr	r1, [pc, #172]	; (8003e68 <prvAddNewTaskToReadyList+0x124>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	3204      	adds	r2, #4
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <prvAddNewTaskToReadyList+0x124>)
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	615a      	str	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	4918      	ldr	r1, [pc, #96]	; (8003e68 <prvAddNewTaskToReadyList+0x124>)
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	4814      	ldr	r0, [pc, #80]	; (8003e68 <prvAddNewTaskToReadyList+0x124>)
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4403      	add	r3, r0
 8003e20:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e22:	f001 fc29 	bl	8005678 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <prvAddNewTaskToReadyList+0x118>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00e      	beq.n	8003e4c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <prvAddNewTaskToReadyList+0x114>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d207      	bcs.n	8003e4c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <prvAddNewTaskToReadyList+0x128>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000260 	.word	0x20000260
 8003e58:	20000188 	.word	0x20000188
 8003e5c:	2000026c 	.word	0x2000026c
 8003e60:	2000027c 	.word	0x2000027c
 8003e64:	20000268 	.word	0x20000268
 8003e68:	2000018c 	.word	0x2000018c
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete, uint8_t *status)
    {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003e7a:	f001 fbcd 	bl	8005618 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <vTaskDelete+0x1a>
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <vTaskDelete+0x108>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	e000      	b.n	8003e8c <vTaskDelete+0x1c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f934 	bl	8003100 <uxListRemove>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <vTaskDelete+0x5a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4936      	ldr	r1, [pc, #216]	; (8003f7c <vTaskDelete+0x10c>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <vTaskDelete+0x5a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	2201      	movs	r2, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <vTaskDelete+0x110>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <vTaskDelete+0x110>)
 8003ec8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <vTaskDelete+0x6c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f912 	bl	8003100 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <vTaskDelete+0x114>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <vTaskDelete+0x114>)
 8003ee4:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <vTaskDelete+0x108>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d10b      	bne.n	8003f08 <vTaskDelete+0x98>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4824      	ldr	r0, [pc, #144]	; (8003f88 <vTaskDelete+0x118>)
 8003ef8:	f7ff f8a5 	bl	8003046 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <vTaskDelete+0x11c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <vTaskDelete+0x11c>)
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e006      	b.n	8003f16 <vTaskDelete+0xa6>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <vTaskDelete+0x120>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <vTaskDelete+0x120>)
 8003f10:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003f12:	f000 fdc5 	bl	8004aa0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003f16:	f001 fbaf 	bl	8005678 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <vTaskDelete+0x108>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d002      	beq.n	8003f2a <vTaskDelete+0xba>
        {
            prvDeleteTCB( pxTCB );
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fdab 	bl	8004a80 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <vTaskDelete+0x124>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01e      	beq.n	8003f70 <vTaskDelete+0x100>
        {
            if( pxTCB == pxCurrentTCB )
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <vTaskDelete+0x108>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d119      	bne.n	8003f70 <vTaskDelete+0x100>
            {
            	// Fix 3/11: Waiting for task_handle clear and set bit flag to 1 anounce delete complete
                configASSERT( uxSchedulerSuspended == 0 );
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <vTaskDelete+0x128>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <vTaskDelete+0xea>
        __asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60bb      	str	r3, [r7, #8]
    }
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <vTaskDelete+0xe8>
                *status = 1;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
                portYIELD_WITHIN_API();
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <vTaskDelete+0x12c>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000188 	.word	0x20000188
 8003f7c:	2000018c 	.word	0x2000018c
 8003f80:	20000268 	.word	0x20000268
 8003f84:	2000027c 	.word	0x2000027c
 8003f88:	20000234 	.word	0x20000234
 8003f8c:	20000248 	.word	0x20000248
 8003f90:	20000260 	.word	0x20000260
 8003f94:	2000026c 	.word	0x2000026c
 8003f98:	20000288 	.word	0x20000288
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <vTaskStartScheduler+0x88>)
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2282      	movs	r2, #130	; 0x82
 8003fb2:	491e      	ldr	r1, [pc, #120]	; (800402c <vTaskStartScheduler+0x8c>)
 8003fb4:	481e      	ldr	r0, [pc, #120]	; (8004030 <vTaskStartScheduler+0x90>)
 8003fb6:	f7ff fdf1 	bl	8003b9c <xTaskCreate>
 8003fba:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003fc2:	f000 fecb 	bl	8004d5c <xTimerCreateTimerTask>
 8003fc6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d116      	bne.n	8003ffc <vTaskStartScheduler+0x5c>
        __asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60bb      	str	r3, [r7, #8]
    }
 8003fe0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <vTaskStartScheduler+0x94>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <vTaskStartScheduler+0x98>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <vTaskStartScheduler+0x9c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003ff6:	f001 fa6d 	bl	80054d4 <xPortStartScheduler>
 8003ffa:	e00e      	b.n	800401a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d10a      	bne.n	800401a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	607b      	str	r3, [r7, #4]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <vTaskStartScheduler+0xa0>)
 800401c:	681b      	ldr	r3, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000284 	.word	0x20000284
 800402c:	08006c20 	.word	0x08006c20
 8004030:	08004905 	.word	0x08004905
 8004034:	20000280 	.word	0x20000280
 8004038:	2000026c 	.word	0x2000026c
 800403c:	20000264 	.word	0x20000264
 8004040:	2000000c 	.word	0x2000000c

08004044 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <vTaskSuspendAll+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	4a03      	ldr	r2, [pc, #12]	; (800405c <vTaskSuspendAll+0x18>)
 8004050:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	20000288 	.word	0x20000288

08004060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800406e:	4b71      	ldr	r3, [pc, #452]	; (8004234 <xTaskResumeAll+0x1d4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <xTaskResumeAll+0x2c>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	607b      	str	r3, [r7, #4]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800408c:	f001 fac4 	bl	8005618 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <xTaskResumeAll+0x1d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3b01      	subs	r3, #1
 8004096:	4a67      	ldr	r2, [pc, #412]	; (8004234 <xTaskResumeAll+0x1d4>)
 8004098:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409a:	4b66      	ldr	r3, [pc, #408]	; (8004234 <xTaskResumeAll+0x1d4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80c0 	bne.w	8004224 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a4:	4b64      	ldr	r3, [pc, #400]	; (8004238 <xTaskResumeAll+0x1d8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80bb 	beq.w	8004224 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ae:	e08a      	b.n	80041c6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <xTaskResumeAll+0x1dc>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	6a12      	ldr	r2, [r2, #32]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	69d2      	ldr	r2, [r2, #28]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3318      	adds	r3, #24
 80040da:	429a      	cmp	r2, r3
 80040dc:	d103      	bne.n	80040e6 <xTaskResumeAll+0x86>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2200      	movs	r2, #0
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	68d2      	ldr	r2, [r2, #12]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	6892      	ldr	r2, [r2, #8]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3304      	adds	r3, #4
 8004118:	429a      	cmp	r2, r3
 800411a:	d103      	bne.n	8004124 <xTaskResumeAll+0xc4>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	4b40      	ldr	r3, [pc, #256]	; (8004240 <xTaskResumeAll+0x1e0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4313      	orrs	r3, r2
 8004142:	4a3f      	ldr	r2, [pc, #252]	; (8004240 <xTaskResumeAll+0x1e0>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	493e      	ldr	r1, [pc, #248]	; (8004244 <xTaskResumeAll+0x1e4>)
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	3304      	adds	r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	3204      	adds	r2, #4
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <xTaskResumeAll+0x1e4>)
 800418a:	441a      	add	r2, r3
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	615a      	str	r2, [r3, #20]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	492b      	ldr	r1, [pc, #172]	; (8004244 <xTaskResumeAll+0x1e4>)
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	4827      	ldr	r0, [pc, #156]	; (8004244 <xTaskResumeAll+0x1e4>)
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4403      	add	r3, r0
 80041b0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <xTaskResumeAll+0x1e8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <xTaskResumeAll+0x1ec>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <xTaskResumeAll+0x1dc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f47f af70 	bne.w	80040b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80041d6:	f000 fc63 	bl	8004aa0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <xTaskResumeAll+0x1f0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d010      	beq.n	8004208 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80041e6:	f000 f853 	bl	8004290 <xTaskIncrementTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <xTaskResumeAll+0x1ec>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f1      	bne.n	80041e6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <xTaskResumeAll+0x1f0>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <xTaskResumeAll+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <xTaskResumeAll+0x1f4>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004224:	f001 fa28 	bl	8005678 <vPortExitCritical>

    return xAlreadyYielded;
 8004228:	69bb      	ldr	r3, [r7, #24]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000288 	.word	0x20000288
 8004238:	20000260 	.word	0x20000260
 800423c:	20000220 	.word	0x20000220
 8004240:	20000268 	.word	0x20000268
 8004244:	2000018c 	.word	0x2000018c
 8004248:	20000188 	.word	0x20000188
 800424c:	20000274 	.word	0x20000274
 8004250:	20000270 	.word	0x20000270
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <xTaskGetTickCount+0x1c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000264 	.word	0x20000264

08004278 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <uxTaskGetNumberOfTasks+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000260 	.word	0x20000260

08004290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429a:	4b7d      	ldr	r3, [pc, #500]	; (8004490 <xTaskIncrementTick+0x200>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 80ec 	bne.w	800447c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a4:	4b7b      	ldr	r3, [pc, #492]	; (8004494 <xTaskIncrementTick+0x204>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80042ac:	4a79      	ldr	r2, [pc, #484]	; (8004494 <xTaskIncrementTick+0x204>)
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80042b8:	4b77      	ldr	r3, [pc, #476]	; (8004498 <xTaskIncrementTick+0x208>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
    }
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xTaskIncrementTick+0x46>
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <xTaskIncrementTick+0x208>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	4b6f      	ldr	r3, [pc, #444]	; (800449c <xTaskIncrementTick+0x20c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6d      	ldr	r2, [pc, #436]	; (8004498 <xTaskIncrementTick+0x208>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4a6d      	ldr	r2, [pc, #436]	; (800449c <xTaskIncrementTick+0x20c>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <xTaskIncrementTick+0x210>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a6b      	ldr	r2, [pc, #428]	; (80044a0 <xTaskIncrementTick+0x210>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	f000 fbd3 	bl	8004aa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <xTaskIncrementTick+0x214>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	429a      	cmp	r2, r3
 8004302:	f0c0 80a6 	bcc.w	8004452 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004306:	4b64      	ldr	r3, [pc, #400]	; (8004498 <xTaskIncrementTick+0x208>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <xTaskIncrementTick+0x214>)
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	601a      	str	r2, [r3, #0]
                    break;
 8004318:	e09b      	b.n	8004452 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431a:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <xTaskIncrementTick+0x208>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800432a:	6a3a      	ldr	r2, [r7, #32]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d203      	bcs.n	800433a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004332:	4a5c      	ldr	r2, [pc, #368]	; (80044a4 <xTaskIncrementTick+0x214>)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004338:	e08b      	b.n	8004452 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	68d2      	ldr	r2, [r2, #12]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3304      	adds	r3, #4
 800435c:	429a      	cmp	r2, r3
 800435e:	d103      	bne.n	8004368 <xTaskIncrementTick+0xd8>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01e      	beq.n	80043be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	6a12      	ldr	r2, [r2, #32]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	69d2      	ldr	r2, [r2, #28]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3318      	adds	r3, #24
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d103      	bne.n	80043ae <xTaskIncrementTick+0x11e>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	1e5a      	subs	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	2201      	movs	r2, #1
 80043c4:	409a      	lsls	r2, r3
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <xTaskIncrementTick+0x218>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	4a36      	ldr	r2, [pc, #216]	; (80044a8 <xTaskIncrementTick+0x218>)
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	4935      	ldr	r1, [pc, #212]	; (80044ac <xTaskIncrementTick+0x21c>)
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3304      	adds	r3, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	3204      	adds	r2, #4
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	1d1a      	adds	r2, r3, #4
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <xTaskIncrementTick+0x21c>)
 8004414:	441a      	add	r2, r3
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	615a      	str	r2, [r3, #20]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4923      	ldr	r1, [pc, #140]	; (80044ac <xTaskIncrementTick+0x21c>)
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	1c59      	adds	r1, r3, #1
 800442e:	481f      	ldr	r0, [pc, #124]	; (80044ac <xTaskIncrementTick+0x21c>)
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4403      	add	r3, r0
 800443a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <xTaskIncrementTick+0x220>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	429a      	cmp	r2, r3
 8004448:	f67f af5d 	bls.w	8004306 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004450:	e759      	b.n	8004306 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <xTaskIncrementTick+0x220>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4914      	ldr	r1, [pc, #80]	; (80044ac <xTaskIncrementTick+0x21c>)
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d901      	bls.n	800446e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <xTaskIncrementTick+0x224>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8004476:	2301      	movs	r3, #1
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	e004      	b.n	8004486 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800447c:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <xTaskIncrementTick+0x228>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <xTaskIncrementTick+0x228>)
 8004484:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000288 	.word	0x20000288
 8004494:	20000264 	.word	0x20000264
 8004498:	20000218 	.word	0x20000218
 800449c:	2000021c 	.word	0x2000021c
 80044a0:	20000278 	.word	0x20000278
 80044a4:	20000280 	.word	0x20000280
 80044a8:	20000268 	.word	0x20000268
 80044ac:	2000018c 	.word	0x2000018c
 80044b0:	20000188 	.word	0x20000188
 80044b4:	20000274 	.word	0x20000274
 80044b8:	20000270 	.word	0x20000270

080044bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <vTaskSwitchContext+0xa4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <vTaskSwitchContext+0xa8>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80044d0:	e03f      	b.n	8004552 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <vTaskSwitchContext+0xa8>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <vTaskSwitchContext+0xac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	f1c3 031f 	rsb	r3, r3, #31
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	491f      	ldr	r1, [pc, #124]	; (800456c <vTaskSwitchContext+0xb0>)
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
    }
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <vTaskSwitchContext+0x5a>
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <vTaskSwitchContext+0xb0>)
 8004524:	4413      	add	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3308      	adds	r3, #8
 800453a:	429a      	cmp	r2, r3
 800453c:	d104      	bne.n	8004548 <vTaskSwitchContext+0x8c>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <vTaskSwitchContext+0xb4>)
 8004550:	6013      	str	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000288 	.word	0x20000288
 8004564:	20000274 	.word	0x20000274
 8004568:	20000268 	.word	0x20000268
 800456c:	2000018c 	.word	0x2000018c
 8004570:	20000188 	.word	0x20000188

08004574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
    }
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <vTaskPlaceOnEventList+0x44>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3318      	adds	r3, #24
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe fd73 	bl	800308e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045a8:	2101      	movs	r1, #1
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f000 fb56 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000188 	.word	0x20000188

080045bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	613b      	str	r3, [r7, #16]
    }
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <vTaskPlaceOnEventListRestricted+0x88>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <vTaskPlaceOnEventListRestricted+0x88>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	621a      	str	r2, [r3, #32]
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <vTaskPlaceOnEventListRestricted+0x88>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	3218      	adds	r2, #24
 8004606:	605a      	str	r2, [r3, #4]
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <vTaskPlaceOnEventListRestricted+0x88>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f103 0218 	add.w	r2, r3, #24
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <vTaskPlaceOnEventListRestricted+0x88>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295
 8004630:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	68b8      	ldr	r0, [r7, #8]
 8004636:	f000 fb11 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
    }
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000188 	.word	0x20000188

08004648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004648:	b480      	push	{r7}
 800464a:	b08b      	sub	sp, #44	; 0x2c
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
    }
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	6a3a      	ldr	r2, [r7, #32]
 8004680:	6a12      	ldr	r2, [r2, #32]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	69d2      	ldr	r2, [r2, #28]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	3318      	adds	r3, #24
 8004696:	429a      	cmp	r2, r3
 8004698:	d103      	bne.n	80046a2 <xTaskRemoveFromEventList+0x5a>
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	6a1a      	ldr	r2, [r3, #32]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2200      	movs	r2, #0
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1e5a      	subs	r2, r3, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <xTaskRemoveFromEventList+0x194>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15e      	bne.n	8004778 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	68d2      	ldr	r2, [r2, #12]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	3304      	adds	r3, #4
 80046dc:	429a      	cmp	r2, r3
 80046de:	d103      	bne.n	80046e8 <xTaskRemoveFromEventList+0xa0>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	2200      	movs	r2, #0
 80046ec:	615a      	str	r2, [r3, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	2201      	movs	r2, #1
 80046fe:	409a      	lsls	r2, r3
 8004700:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <xTaskRemoveFromEventList+0x198>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4313      	orrs	r3, r2
 8004706:	4a36      	ldr	r2, [pc, #216]	; (80047e0 <xTaskRemoveFromEventList+0x198>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	4935      	ldr	r1, [pc, #212]	; (80047e4 <xTaskRemoveFromEventList+0x19c>)
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3304      	adds	r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	3204      	adds	r2, #4
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <xTaskRemoveFromEventList+0x19c>)
 800474e:	441a      	add	r2, r3
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	615a      	str	r2, [r3, #20]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4922      	ldr	r1, [pc, #136]	; (80047e4 <xTaskRemoveFromEventList+0x19c>)
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	481e      	ldr	r0, [pc, #120]	; (80047e4 <xTaskRemoveFromEventList+0x19c>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4403      	add	r3, r0
 8004774:	6019      	str	r1, [r3, #0]
 8004776:	e01b      	b.n	80047b0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <xTaskRemoveFromEventList+0x1a0>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	61da      	str	r2, [r3, #28]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	3218      	adds	r2, #24
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f103 0218 	add.w	r2, r3, #24
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <xTaskRemoveFromEventList+0x1a0>)
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <xTaskRemoveFromEventList+0x1a0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <xTaskRemoveFromEventList+0x1a0>)
 80047ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <xTaskRemoveFromEventList+0x1a4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d905      	bls.n	80047ca <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <xTaskRemoveFromEventList+0x1a8>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e001      	b.n	80047ce <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	372c      	adds	r7, #44	; 0x2c
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000288 	.word	0x20000288
 80047e0:	20000268 	.word	0x20000268
 80047e4:	2000018c 	.word	0x2000018c
 80047e8:	20000220 	.word	0x20000220
 80047ec:	20000188 	.word	0x20000188
 80047f0:	20000274 	.word	0x20000274

080047f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <vTaskInternalSetTimeOutState+0x24>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <vTaskInternalSetTimeOutState+0x28>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	605a      	str	r2, [r3, #4]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000278 	.word	0x20000278
 800481c:	20000264 	.word	0x20000264

08004820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	613b      	str	r3, [r7, #16]
    }
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
    }
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004862:	f000 fed9 	bl	8005618 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <xTaskCheckForTimeOut+0xc4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d102      	bne.n	8004886 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e026      	b.n	80048d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <xTaskCheckForTimeOut+0xc8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d00a      	beq.n	80048a8 <xTaskCheckForTimeOut+0x88>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	429a      	cmp	r2, r3
 800489a:	d305      	bcc.n	80048a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e015      	b.n	80048d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d20b      	bcs.n	80048ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad2      	subs	r2, r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ff98 	bl	80047f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e004      	b.n	80048d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80048d4:	f000 fed0 	bl	8005678 <vPortExitCritical>

    return xReturn;
 80048d8:	69fb      	ldr	r3, [r7, #28]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000264 	.word	0x20000264
 80048e8:	20000278 	.word	0x20000278

080048ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <vTaskMissedYield+0x14>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000274 	.word	0x20000274

08004904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800490c:	f000 f852 	bl	80049b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <prvIdleTask+0x28>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d9f9      	bls.n	800490c <prvIdleTask+0x8>
            {
                taskYIELD();
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <prvIdleTask+0x2c>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004928:	e7f0      	b.n	800490c <prvIdleTask+0x8>
 800492a:	bf00      	nop
 800492c:	2000018c 	.word	0x2000018c
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e00c      	b.n	800495a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a12      	ldr	r2, [pc, #72]	; (8004994 <prvInitialiseTaskLists+0x60>)
 800494c:	4413      	add	r3, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fb4c 	bl	8002fec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d9ef      	bls.n	8004940 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004960:	480d      	ldr	r0, [pc, #52]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004962:	f7fe fb43 	bl	8002fec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004966:	480d      	ldr	r0, [pc, #52]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004968:	f7fe fb40 	bl	8002fec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800496c:	480c      	ldr	r0, [pc, #48]	; (80049a0 <prvInitialiseTaskLists+0x6c>)
 800496e:	f7fe fb3d 	bl	8002fec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004972:	480c      	ldr	r0, [pc, #48]	; (80049a4 <prvInitialiseTaskLists+0x70>)
 8004974:	f7fe fb3a 	bl	8002fec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004978:	480b      	ldr	r0, [pc, #44]	; (80049a8 <prvInitialiseTaskLists+0x74>)
 800497a:	f7fe fb37 	bl	8002fec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvInitialiseTaskLists+0x78>)
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004982:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvInitialiseTaskLists+0x7c>)
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2000018c 	.word	0x2000018c
 8004998:	200001f0 	.word	0x200001f0
 800499c:	20000204 	.word	0x20000204
 80049a0:	20000220 	.word	0x20000220
 80049a4:	20000234 	.word	0x20000234
 80049a8:	2000024c 	.word	0x2000024c
 80049ac:	20000218 	.word	0x20000218
 80049b0:	2000021c 	.word	0x2000021c

080049b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ba:	e019      	b.n	80049f0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80049bc:	f000 fe2c 	bl	8005618 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fb97 	bl	8003100 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049da:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049e4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80049e6:	f000 fe47 	bl	8005678 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f848 	bl	8004a80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e1      	bne.n	80049bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000234 	.word	0x20000234
 8004a08:	20000260 	.word	0x20000260
 8004a0c:	20000248 	.word	0x20000248

08004a10 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004a1c:	e005      	b.n	8004a2a <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3301      	adds	r3, #1
 8004a22:	607b      	str	r3, [r7, #4]
            ulCount++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2ba5      	cmp	r3, #165	; 0xa5
 8004a30:	d0f5      	beq.n	8004a1e <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	b29b      	uxth	r3, r3
    }
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <uxTaskGetStackHighWaterMark+0x14>
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <uxTaskGetStackHighWaterMark+0x34>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e000      	b.n	8004a5e <uxTaskGetStackHighWaterMark+0x16>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004a66:	6938      	ldr	r0, [r7, #16]
 8004a68:	f7ff ffd2 	bl	8004a10 <prvTaskCheckFreeStackSpace>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8004a70:	68fb      	ldr	r3, [r7, #12]
    }
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000188 	.word	0x20000188

08004a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff9f 	bl	80059d0 <vPortFree>
            vPortFree( pxTCB );
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 ff9c 	bl	80059d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvResetNextTaskUnblockTime+0x30>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvResetNextTaskUnblockTime+0x34>)
 8004ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004ab6:	e005      	b.n	8004ac4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <prvResetNextTaskUnblockTime+0x30>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <prvResetNextTaskUnblockTime+0x34>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000218 	.word	0x20000218
 8004ad4:	20000280 	.word	0x20000280

08004ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <xTaskGetSchedulerState+0x34>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	e008      	b.n	8004afe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <xTaskGetSchedulerState+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004af4:	2302      	movs	r3, #2
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e001      	b.n	8004afe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004afe:	687b      	ldr	r3, [r7, #4]
    }
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	2000026c 	.word	0x2000026c
 8004b10:	20000288 	.word	0x20000288

08004b14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 808c 	beq.w	8004c44 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <xTaskPriorityDisinherit+0x13c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d00a      	beq.n	8004b4c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	613b      	str	r3, [r7, #16]
    }
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
    }
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d061      	beq.n	8004c44 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d15d      	bne.n	8004c44 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fab7 	bl	8003100 <uxListRemove>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <xTaskPriorityDisinherit+0x140>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <xTaskPriorityDisinherit+0x140>)
 8004bac:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f1c3 0205 	rsb	r2, r3, #5
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <xTaskPriorityDisinherit+0x140>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <xTaskPriorityDisinherit+0x140>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	491f      	ldr	r1, [pc, #124]	; (8004c58 <xTaskPriorityDisinherit+0x144>)
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	3304      	adds	r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	3204      	adds	r2, #4
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <xTaskPriorityDisinherit+0x144>)
 8004c18:	441a      	add	r2, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	615a      	str	r2, [r3, #20]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	490d      	ldr	r1, [pc, #52]	; (8004c58 <xTaskPriorityDisinherit+0x144>)
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1c59      	adds	r1, r3, #1
 8004c32:	4809      	ldr	r0, [pc, #36]	; (8004c58 <xTaskPriorityDisinherit+0x144>)
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4403      	add	r3, r0
 8004c3e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004c44:	69fb      	ldr	r3, [r7, #28]
    }
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000188 	.word	0x20000188
 8004c54:	20000268 	.word	0x20000268
 8004c58:	2000018c 	.word	0x2000018c

08004c5c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6c:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fa44 	bl	8003100 <uxListRemove>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2201      	movs	r2, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4013      	ands	r3, r2
 8004c92:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c94:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d124      	bne.n	8004ce8 <prvAddCurrentTaskToDelayedList+0x8c>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d021      	beq.n	8004ce8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	6892      	ldr	r2, [r2, #8]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	3204      	adds	r2, #4
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004cd8:	615a      	str	r2, [r3, #20]
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ce6:	e026      	b.n	8004d36 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d209      	bcs.n	8004d14 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe f9be 	bl	800308e <vListInsert>
}
 8004d12:	e010      	b.n	8004d36 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe f9b4 	bl	800308e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d202      	bcs.n	8004d36 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004d30:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000264 	.word	0x20000264
 8004d44:	20000188 	.word	0x20000188
 8004d48:	20000268 	.word	0x20000268
 8004d4c:	2000024c 	.word	0x2000024c
 8004d50:	2000021c 	.word	0x2000021c
 8004d54:	20000218 	.word	0x20000218
 8004d58:	20000280 	.word	0x20000280

08004d5c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004d66:	f000 faef 	bl	8005348 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <xTimerCreateTimerTask+0x54>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xTimerCreateTimerTask+0x58>)
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	2302      	movs	r3, #2
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d80:	490d      	ldr	r1, [pc, #52]	; (8004db8 <xTimerCreateTimerTask+0x5c>)
 8004d82:	480e      	ldr	r0, [pc, #56]	; (8004dbc <xTimerCreateTimerTask+0x60>)
 8004d84:	f7fe ff0a 	bl	8003b9c <xTaskCreate>
 8004d88:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	603b      	str	r3, [r7, #0]
    }
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004da6:	687b      	ldr	r3, [r7, #4]
    }
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200002bc 	.word	0x200002bc
 8004db4:	200002c0 	.word	0x200002c0
 8004db8:	08006c28 	.word	0x08006c28
 8004dbc:	08004fb5 	.word	0x08004fb5

08004dc0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004dce:	202c      	movs	r0, #44	; 0x2c
 8004dd0:	f000 fd44 	bl	800585c <pvPortMalloc>
 8004dd4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f805 	bl	8004e02 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004df8:	697b      	ldr	r3, [r7, #20]
        }
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	617b      	str	r3, [r7, #20]
    }
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8004e2c:	f000 fa8c 	bl	8005348 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe f8ed 	bl	800302c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	623b      	str	r3, [r7, #32]
    }
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <xTimerGenericCommand+0x98>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d02a      	beq.n	8004f00 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	dc18      	bgt.n	8004eee <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ebc:	f7ff fe0c 	bl	8004ad8 <xTaskGetSchedulerState>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d109      	bne.n	8004eda <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <xTimerGenericCommand+0x98>)
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f107 0114 	add.w	r1, r7, #20
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	f7fe fa41 	bl	8003358 <xQueueGenericSend>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ed8:	e012      	b.n	8004f00 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <xTimerGenericCommand+0x98>)
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f107 0114 	add.w	r1, r7, #20
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f7fe fa37 	bl	8003358 <xQueueGenericSend>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
 8004eec:	e008      	b.n	8004f00 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <xTimerGenericCommand+0x98>)
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	f107 0114 	add.w	r1, r7, #20
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	f7fe fb2b 	bl	8003554 <xQueueGenericSendFromISR>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004f02:	4618      	mov	r0, r3
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200002bc 	.word	0x200002bc

08004f10 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004f1c:	e008      	b.n	8004f30 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	18d1      	adds	r1, r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f8dd 	bl	80050fc <prvInsertTimerInActiveList>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ea      	bne.n	8004f1e <prvReloadTimer+0xe>
        }
    }
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <prvProcessExpiredTimer+0x5c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe f8c7 	bl	8003100 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff ffc3 	bl	8004f10 <prvReloadTimer>
 8004f8a:	e008      	b.n	8004f9e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	4798      	blx	r3
    }
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200002b4 	.word	0x200002b4

08004fb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f857 	bl	8005074 <prvGetNextExpireTime>
 8004fc6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f803 	bl	8004fd8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004fd2:	f000 f8d5 	bl	8005180 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fd6:	e7f1      	b.n	8004fbc <prvTimerTask+0x8>

08004fd8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004fe2:	f7ff f82f 	bl	8004044 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe6:	f107 0308 	add.w	r3, r7, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f866 	bl	80050bc <prvSampleTimeNow>
 8004ff0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d130      	bne.n	800505a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <prvProcessTimerOrBlockTask+0x3c>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d806      	bhi.n	8005014 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005006:	f7ff f82b 	bl	8004060 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ffa1 	bl	8004f54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005012:	e024      	b.n	800505e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <prvProcessTimerOrBlockTask+0x90>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <prvProcessTimerOrBlockTask+0x50>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <prvProcessTimerOrBlockTask+0x52>
 8005028:	2300      	movs	r3, #0
 800502a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <prvProcessTimerOrBlockTask+0x94>)
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	f7fe fd7b 	bl	8003b34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800503e:	f7ff f80f 	bl	8004060 <xTaskResumeAll>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <prvProcessTimerOrBlockTask+0x98>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
    }
 8005058:	e001      	b.n	800505e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800505a:	f7ff f801 	bl	8004060 <xTaskResumeAll>
    }
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200002b8 	.word	0x200002b8
 800506c:	200002bc 	.word	0x200002bc
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <prvGetNextExpireTime+0x44>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <prvGetNextExpireTime+0x16>
 8005086:	2201      	movs	r2, #1
 8005088:	e000      	b.n	800508c <prvGetNextExpireTime+0x18>
 800508a:	2200      	movs	r2, #0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvGetNextExpireTime+0x44>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e001      	b.n	80050a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80050a8:	68fb      	ldr	r3, [r7, #12]
    }
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200002b4 	.word	0x200002b4

080050bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80050c4:	f7ff f8c8 	bl	8004258 <xTaskGetTickCount>
 80050c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <prvSampleTimeNow+0x3c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d205      	bcs.n	80050e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80050d4:	f000 f912 	bl	80052fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e002      	b.n	80050e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <prvSampleTimeNow+0x3c>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80050ec:	68fb      	ldr	r3, [r7, #12]
    }
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200002c4 	.word	0x200002c4

080050fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d812      	bhi.n	8005148 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e01b      	b.n	800516e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <prvInsertTimerInActiveList+0x7c>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7fd ffa4 	bl	800308e <vListInsert>
 8005146:	e012      	b.n	800516e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d206      	bcs.n	800515e <prvInsertTimerInActiveList+0x62>
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e007      	b.n	800516e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <prvInsertTimerInActiveList+0x80>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7fd ff90 	bl	800308e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800516e:	697b      	ldr	r3, [r7, #20]
    }
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200002b8 	.word	0x200002b8
 800517c:	200002b4 	.word	0x200002b4

08005180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005186:	e0a6      	b.n	80052d6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f2c0 80a2 	blt.w	80052d4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd ffad 	bl	8003100 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff87 	bl	80050bc <prvSampleTimeNow>
 80051ae:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	f200 808e 	bhi.w	80052d6 <prvProcessReceivedCommands+0x156>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <prvProcessReceivedCommands+0x40>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051e5 	.word	0x080051e5
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	08005261 	.word	0x08005261
 80051d0:	080052ab 	.word	0x080052ab
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051e5 	.word	0x080051e5
 80051dc:	0800524d 	.word	0x0800524d
 80051e0:	08005261 	.word	0x08005261
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	18d1      	adds	r1, r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	69f8      	ldr	r0, [r7, #28]
 8005204:	f7ff ff7a 	bl	80050fc <prvInsertTimerInActiveList>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d063      	beq.n	80052d6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	4413      	add	r3, r2
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4619      	mov	r1, r3
 8005228:	69f8      	ldr	r0, [r7, #28]
 800522a:	f7ff fe71 	bl	8004f10 <prvReloadTimer>
 800522e:	e008      	b.n	8005242 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	69f8      	ldr	r0, [r7, #28]
 8005248:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800524a:	e044      	b.n	80052d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800525e:	e03a      	b.n	80052d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	617b      	str	r3, [r7, #20]
    }
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	18d1      	adds	r1, r2, r3
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	69f8      	ldr	r0, [r7, #28]
 80052a4:	f7ff ff2a 	bl	80050fc <prvInsertTimerInActiveList>
                        break;
 80052a8:	e015      	b.n	80052d6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80052b8:	69f8      	ldr	r0, [r7, #28]
 80052ba:	f000 fb89 	bl	80059d0 <vPortFree>
 80052be:	e00a      	b.n	80052d6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80052d2:	e000      	b.n	80052d6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80052d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <prvProcessReceivedCommands+0x178>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f107 0108 	add.w	r1, r7, #8
 80052de:	2200      	movs	r2, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe f9e9 	bl	80036b8 <xQueueReceive>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f47f af4d 	bne.w	8005188 <prvProcessReceivedCommands+0x8>
        }
    }
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200002bc 	.word	0x200002bc

080052fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005302:	e009      	b.n	8005318 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <prvSwitchTimerLists+0x44>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800530e:	f04f 31ff 	mov.w	r1, #4294967295
 8005312:	6838      	ldr	r0, [r7, #0]
 8005314:	f7ff fe1e 	bl	8004f54 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <prvSwitchTimerLists+0x44>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005322:	4b07      	ldr	r3, [pc, #28]	; (8005340 <prvSwitchTimerLists+0x44>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <prvSwitchTimerLists+0x48>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <prvSwitchTimerLists+0x44>)
 800532e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <prvSwitchTimerLists+0x48>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
    }
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200002b4 	.word	0x200002b4
 8005344:	200002b8 	.word	0x200002b8

08005348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800534c:	f000 f964 	bl	8005618 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005350:	4b12      	ldr	r3, [pc, #72]	; (800539c <prvCheckForValidListAndQueue+0x54>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11d      	bne.n	8005394 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005358:	4811      	ldr	r0, [pc, #68]	; (80053a0 <prvCheckForValidListAndQueue+0x58>)
 800535a:	f7fd fe47 	bl	8002fec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800535e:	4811      	ldr	r0, [pc, #68]	; (80053a4 <prvCheckForValidListAndQueue+0x5c>)
 8005360:	f7fd fe44 	bl	8002fec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <prvCheckForValidListAndQueue+0x60>)
 8005366:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <prvCheckForValidListAndQueue+0x58>)
 8005368:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <prvCheckForValidListAndQueue+0x64>)
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <prvCheckForValidListAndQueue+0x5c>)
 800536e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005370:	2200      	movs	r2, #0
 8005372:	210c      	movs	r1, #12
 8005374:	200a      	movs	r0, #10
 8005376:	f7fd ff7d 	bl	8003274 <xQueueGenericCreate>
 800537a:	4603      	mov	r3, r0
 800537c:	4a07      	ldr	r2, [pc, #28]	; (800539c <prvCheckForValidListAndQueue+0x54>)
 800537e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <prvCheckForValidListAndQueue+0x54>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <prvCheckForValidListAndQueue+0x54>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4908      	ldr	r1, [pc, #32]	; (80053b0 <prvCheckForValidListAndQueue+0x68>)
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fb82 	bl	8003a98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005394:	f000 f970 	bl	8005678 <vPortExitCritical>
    }
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}
 800539c:	200002bc 	.word	0x200002bc
 80053a0:	2000028c 	.word	0x2000028c
 80053a4:	200002a0 	.word	0x200002a0
 80053a8:	200002b4 	.word	0x200002b4
 80053ac:	200002b8 	.word	0x200002b8
 80053b0:	08006c30 	.word	0x08006c30

080053b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3b04      	subs	r3, #4
 80053c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3b04      	subs	r3, #4
 80053e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80053e4:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <pxPortInitialiseStack+0x64>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3b14      	subs	r3, #20
 80053ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f06f 0202 	mvn.w	r2, #2
 8005402:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3b20      	subs	r3, #32
 8005408:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	0800541d 	.word	0x0800541d

0800541c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <prvTaskExitError+0x54>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d00a      	beq.n	8005446 <prvTaskExitError+0x2a>
        __asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
    }
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <prvTaskExitError+0x28>
        __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60bb      	str	r3, [r7, #8]
    }
 8005458:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800545a:	bf00      	nop
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0fc      	beq.n	800545c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000010 	.word	0x20000010
	...

08005480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <pxCurrentTCBConst2>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f380 8809 	msr	PSP, r0
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	4770      	bx	lr
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst2>:
 80054a0:	20000188 	.word	0x20000188
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <prvPortStartFirstTask+0x24>)
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f380 8808 	msr	MSP, r0
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8814 	msr	CONTROL, r0
 80054ba:	b662      	cpsie	i
 80054bc:	b661      	cpsie	f
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	df00      	svc	0
 80054c8:	bf00      	nop
 80054ca:	0000      	.short	0x0000
 80054cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop

080054d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054da:	4b46      	ldr	r3, [pc, #280]	; (80055f4 <xPortStartScheduler+0x120>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a46      	ldr	r2, [pc, #280]	; (80055f8 <xPortStartScheduler+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10a      	bne.n	80054fa <xPortStartScheduler+0x26>
        __asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	613b      	str	r3, [r7, #16]
    }
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054fa:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <xPortStartScheduler+0x120>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a3f      	ldr	r2, [pc, #252]	; (80055fc <xPortStartScheduler+0x128>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10a      	bne.n	800551a <xPortStartScheduler+0x46>
        __asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60fb      	str	r3, [r7, #12]
    }
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800551a:	4b39      	ldr	r3, [pc, #228]	; (8005600 <xPortStartScheduler+0x12c>)
 800551c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4b31      	ldr	r3, [pc, #196]	; (8005604 <xPortStartScheduler+0x130>)
 8005540:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005542:	4b31      	ldr	r3, [pc, #196]	; (8005608 <xPortStartScheduler+0x134>)
 8005544:	2207      	movs	r2, #7
 8005546:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005548:	e009      	b.n	800555e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800554a:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <xPortStartScheduler+0x134>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	4a2d      	ldr	r2, [pc, #180]	; (8005608 <xPortStartScheduler+0x134>)
 8005552:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d0ef      	beq.n	800554a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800556a:	4b27      	ldr	r3, [pc, #156]	; (8005608 <xPortStartScheduler+0x134>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1c3 0307 	rsb	r3, r3, #7
 8005572:	2b04      	cmp	r3, #4
 8005574:	d00a      	beq.n	800558c <xPortStartScheduler+0xb8>
        __asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	60bb      	str	r3, [r7, #8]
    }
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800558c:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <xPortStartScheduler+0x134>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <xPortStartScheduler+0x134>)
 8005594:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005596:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <xPortStartScheduler+0x134>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <xPortStartScheduler+0x134>)
 80055a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <xPortStartScheduler+0x138>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a17      	ldr	r2, [pc, #92]	; (800560c <xPortStartScheduler+0x138>)
 80055b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <xPortStartScheduler+0x138>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a14      	ldr	r2, [pc, #80]	; (800560c <xPortStartScheduler+0x138>)
 80055bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80055c2:	f000 f8db 	bl	800577c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <xPortStartScheduler+0x13c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80055cc:	f000 f8fa 	bl	80057c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <xPortStartScheduler+0x140>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <xPortStartScheduler+0x140>)
 80055d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80055dc:	f7ff ff64 	bl	80054a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80055e0:	f7fe ff6c 	bl	80044bc <vTaskSwitchContext>
    prvTaskExitError();
 80055e4:	f7ff ff1a 	bl	800541c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	e000ed00 	.word	0xe000ed00
 80055f8:	410fc271 	.word	0x410fc271
 80055fc:	410fc270 	.word	0x410fc270
 8005600:	e000e400 	.word	0xe000e400
 8005604:	200002c8 	.word	0x200002c8
 8005608:	200002cc 	.word	0x200002cc
 800560c:	e000ed20 	.word	0xe000ed20
 8005610:	20000010 	.word	0x20000010
 8005614:	e000ef34 	.word	0xe000ef34

08005618 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
        __asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
    }
 8005630:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <vPortEnterCritical+0x58>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <vPortEnterCritical+0x58>)
 800563a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <vPortEnterCritical+0x58>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10f      	bne.n	8005664 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <vPortEnterCritical+0x5c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <vPortEnterCritical+0x4c>
        __asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	603b      	str	r3, [r7, #0]
    }
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vPortEnterCritical+0x4a>
    }
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000010 	.word	0x20000010
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <vPortExitCritical+0x50>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <vPortExitCritical+0x24>
        __asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	607b      	str	r3, [r7, #4]
    }
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <vPortExitCritical+0x50>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <vPortExitCritical+0x50>)
 80056a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <vPortExitCritical+0x50>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d105      	bne.n	80056ba <vPortExitCritical+0x42>
 80056ae:	2300      	movs	r3, #0
 80056b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f383 8811 	msr	BASEPRI, r3
    }
 80056b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010
 80056cc:	00000000 	.word	0x00000000

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <pxCurrentTCBConst>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f01e 0f10 	tst.w	lr, #16
 80056e0:	bf08      	it	eq
 80056e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ea:	6010      	str	r0, [r2, #0]
 80056ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056f4:	f380 8811 	msr	BASEPRI, r0
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f7fe fedc 	bl	80044bc <vTaskSwitchContext>
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f380 8811 	msr	BASEPRI, r0
 800570c:	bc09      	pop	{r0, r3}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005716:	f01e 0f10 	tst.w	lr, #16
 800571a:	bf08      	it	eq
 800571c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005720:	f380 8809 	msr	PSP, r0
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	f3af 8000 	nop.w

08005730 <pxCurrentTCBConst>:
 8005730:	20000188 	.word	0x20000188
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
        __asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
    }
 8005750:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005752:	f7fe fd9d 	bl	8004290 <xTaskIncrementTick>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <SysTick_Handler+0x40>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f383 8811 	msr	BASEPRI, r3
    }
 800576e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <vPortSetupTimerInterrupt+0x38>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <vPortSetupTimerInterrupt+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <vPortSetupTimerInterrupt+0x40>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <vPortSetupTimerInterrupt+0x44>)
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010
 80057b4:	e000e018 	.word	0xe000e018
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3
 80057c0:	e000e014 	.word	0xe000e014

080057c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80057c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057d4 <vPortEnableVFP+0x10>
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr
 80057d2:	0000      	.short	0x0000
 80057d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop

080057dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80057e2:	f3ef 8305 	mrs	r3, IPSR
 80057e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	d914      	bls.n	8005818 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <vPortValidateInterruptPriority+0x70>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <vPortValidateInterruptPriority+0x74>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	7afa      	ldrb	r2, [r7, #11]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d20a      	bcs.n	8005818 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	607b      	str	r3, [r7, #4]
    }
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <vPortValidateInterruptPriority+0x78>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <vPortValidateInterruptPriority+0x7c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d90a      	bls.n	800583e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	603b      	str	r3, [r7, #0]
    }
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <vPortValidateInterruptPriority+0x60>
    }
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	e000e3f0 	.word	0xe000e3f0
 8005850:	200002c8 	.word	0x200002c8
 8005854:	e000ed0c 	.word	0xe000ed0c
 8005858:	200002cc 	.word	0x200002cc

0800585c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005868:	f7fe fbec 	bl	8004044 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <pvPortMalloc+0x160>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005874:	f000 f914 	bl	8005aa0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800587e:	2208      	movs	r2, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	3308      	adds	r3, #8
 800588a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	43db      	mvns	r3, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d804      	bhi.n	80058a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	4413      	add	r3, r2
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e001      	b.n	80058a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db70      	blt.n	800598c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d06d      	beq.n	800598c <pvPortMalloc+0x130>
 80058b0:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <pvPortMalloc+0x164>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d868      	bhi.n	800598c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80058ba:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x168>)
 80058bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <pvPortMalloc+0x168>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058c4:	e004      	b.n	80058d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <pvPortMalloc+0x86>
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f1      	bne.n	80058c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <pvPortMalloc+0x160>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d04f      	beq.n	800598c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	4413      	add	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	2308      	movs	r3, #8
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	429a      	cmp	r2, r3
 800590c:	d91f      	bls.n	800594e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <pvPortMalloc+0xda>
        __asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
    }
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005948:	6978      	ldr	r0, [r7, #20]
 800594a:	f000 f905 	bl	8005b58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <pvPortMalloc+0x164>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <pvPortMalloc+0x164>)
 800595a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <pvPortMalloc+0x164>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <pvPortMalloc+0x16c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d203      	bcs.n	8005970 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <pvPortMalloc+0x164>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <pvPortMalloc+0x16c>)
 800596e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <pvPortMalloc+0x170>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <pvPortMalloc+0x170>)
 800598a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800598c:	f7fe fb68 	bl	8004060 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <pvPortMalloc+0x154>
        __asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
    }
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <pvPortMalloc+0x152>
    return pvReturn;
 80059b0:	69fb      	ldr	r3, [r7, #28]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20012ed8 	.word	0x20012ed8
 80059c0:	20012edc 	.word	0x20012edc
 80059c4:	20012ed0 	.word	0x20012ed0
 80059c8:	20012ee0 	.word	0x20012ee0
 80059cc:	20012ee4 	.word	0x20012ee4

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d049      	beq.n	8005a76 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db0a      	blt.n	8005a0e <vPortFree+0x3e>
        __asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
    }
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <vPortFree+0x5c>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
    }
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0fdb      	lsrs	r3, r3, #31
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01c      	beq.n	8005a76 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d118      	bne.n	8005a76 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005a50:	f7fe faf8 	bl	8004044 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <vPortFree+0xb0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <vPortFree+0xb0>)
 8005a60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a62:	6938      	ldr	r0, [r7, #16]
 8005a64:	f000 f878 	bl	8005b58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <vPortFree+0xb4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <vPortFree+0xb4>)
 8005a70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a72:	f7fe faf5 	bl	8004060 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20012edc 	.word	0x20012edc
 8005a84:	20012ee8 	.word	0x20012ee8

08005a88 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <xPortGetFreeHeapSize+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20012edc 	.word	0x20012edc

08005aa0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aa6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005aaa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <prvHeapInit+0xa4>)
 8005aae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00c      	beq.n	8005ad4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3307      	adds	r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0307 	bic.w	r3, r3, #7
 8005ac6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <prvHeapInit+0xa4>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <prvHeapInit+0xa8>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <prvHeapInit+0xa8>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005aec:	2208      	movs	r2, #8
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <prvHeapInit+0xac>)
 8005b00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <prvHeapInit+0xac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <prvHeapInit+0xac>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvHeapInit+0xac>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <prvHeapInit+0xb0>)
 8005b2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a07      	ldr	r2, [pc, #28]	; (8005b54 <prvHeapInit+0xb4>)
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	200002d0 	.word	0x200002d0
 8005b48:	20012ed0 	.word	0x20012ed0
 8005b4c:	20012ed8 	.word	0x20012ed8
 8005b50:	20012ee0 	.word	0x20012ee0
 8005b54:	20012edc 	.word	0x20012edc

08005b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x14>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8f7      	bhi.n	8005b66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d118      	bne.n	8005be0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d00d      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e008      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20012ed0 	.word	0x20012ed0
 8005c08:	20012ed8 	.word	0x20012ed8

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4d0d      	ldr	r5, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1b64      	subs	r4, r4, r5
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2600      	movs	r6, #0
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4d0b      	ldr	r5, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f000 ffca 	bl	8006bb8 <_init>
 8005c24:	1b64      	subs	r4, r4, r5
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2600      	movs	r6, #0
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08006cf0 	.word	0x08006cf0
 8005c48:	08006cf0 	.word	0x08006cf0
 8005c4c:	08006cf0 	.word	0x08006cf0
 8005c50:	08006cf4 	.word	0x08006cf4

08005c54 <memcpy>:
 8005c54:	440a      	add	r2, r1
 8005c56:	4291      	cmp	r1, r2
 8005c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c5c:	d100      	bne.n	8005c60 <memcpy+0xc>
 8005c5e:	4770      	bx	lr
 8005c60:	b510      	push	{r4, lr}
 8005c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	d1f9      	bne.n	8005c62 <memcpy+0xe>
 8005c6e:	bd10      	pop	{r4, pc}

08005c70 <memset>:
 8005c70:	4402      	add	r2, r0
 8005c72:	4603      	mov	r3, r0
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d100      	bne.n	8005c7a <memset+0xa>
 8005c78:	4770      	bx	lr
 8005c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7e:	e7f9      	b.n	8005c74 <memset+0x4>

08005c80 <iprintf>:
 8005c80:	b40f      	push	{r0, r1, r2, r3}
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <iprintf+0x2c>)
 8005c84:	b513      	push	{r0, r1, r4, lr}
 8005c86:	681c      	ldr	r4, [r3, #0]
 8005c88:	b124      	cbz	r4, 8005c94 <iprintf+0x14>
 8005c8a:	69a3      	ldr	r3, [r4, #24]
 8005c8c:	b913      	cbnz	r3, 8005c94 <iprintf+0x14>
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 f866 	bl	8005d60 <__sinit>
 8005c94:	ab05      	add	r3, sp, #20
 8005c96:	9a04      	ldr	r2, [sp, #16]
 8005c98:	68a1      	ldr	r1, [r4, #8]
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 f9bd 	bl	800601c <_vfiprintf_r>
 8005ca2:	b002      	add	sp, #8
 8005ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca8:	b004      	add	sp, #16
 8005caa:	4770      	bx	lr
 8005cac:	20000014 	.word	0x20000014

08005cb0 <std>:
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cbe:	6083      	str	r3, [r0, #8]
 8005cc0:	8181      	strh	r1, [r0, #12]
 8005cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8005cc4:	81c2      	strh	r2, [r0, #14]
 8005cc6:	6183      	str	r3, [r0, #24]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2208      	movs	r2, #8
 8005ccc:	305c      	adds	r0, #92	; 0x5c
 8005cce:	f7ff ffcf 	bl	8005c70 <memset>
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x38>)
 8005cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x3c>)
 8005cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <std+0x40>)
 8005cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <std+0x44>)
 8005ce0:	6224      	str	r4, [r4, #32]
 8005ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ce4:	bd10      	pop	{r4, pc}
 8005ce6:	bf00      	nop
 8005ce8:	080065c5 	.word	0x080065c5
 8005cec:	080065e7 	.word	0x080065e7
 8005cf0:	0800661f 	.word	0x0800661f
 8005cf4:	08006643 	.word	0x08006643

08005cf8 <_cleanup_r>:
 8005cf8:	4901      	ldr	r1, [pc, #4]	; (8005d00 <_cleanup_r+0x8>)
 8005cfa:	f000 b8af 	b.w	8005e5c <_fwalk_reent>
 8005cfe:	bf00      	nop
 8005d00:	0800691d 	.word	0x0800691d

08005d04 <__sfmoreglue>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	2268      	movs	r2, #104	; 0x68
 8005d08:	1e4d      	subs	r5, r1, #1
 8005d0a:	4355      	muls	r5, r2
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d12:	f000 f8e5 	bl	8005ee0 <_malloc_r>
 8005d16:	4604      	mov	r4, r0
 8005d18:	b140      	cbz	r0, 8005d2c <__sfmoreglue+0x28>
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8005d20:	300c      	adds	r0, #12
 8005d22:	60a0      	str	r0, [r4, #8]
 8005d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d28:	f7ff ffa2 	bl	8005c70 <memset>
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}

08005d30 <__sfp_lock_acquire>:
 8005d30:	4801      	ldr	r0, [pc, #4]	; (8005d38 <__sfp_lock_acquire+0x8>)
 8005d32:	f000 b8b3 	b.w	8005e9c <__retarget_lock_acquire_recursive>
 8005d36:	bf00      	nop
 8005d38:	20012eed 	.word	0x20012eed

08005d3c <__sfp_lock_release>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	; (8005d44 <__sfp_lock_release+0x8>)
 8005d3e:	f000 b8ae 	b.w	8005e9e <__retarget_lock_release_recursive>
 8005d42:	bf00      	nop
 8005d44:	20012eed 	.word	0x20012eed

08005d48 <__sinit_lock_acquire>:
 8005d48:	4801      	ldr	r0, [pc, #4]	; (8005d50 <__sinit_lock_acquire+0x8>)
 8005d4a:	f000 b8a7 	b.w	8005e9c <__retarget_lock_acquire_recursive>
 8005d4e:	bf00      	nop
 8005d50:	20012eee 	.word	0x20012eee

08005d54 <__sinit_lock_release>:
 8005d54:	4801      	ldr	r0, [pc, #4]	; (8005d5c <__sinit_lock_release+0x8>)
 8005d56:	f000 b8a2 	b.w	8005e9e <__retarget_lock_release_recursive>
 8005d5a:	bf00      	nop
 8005d5c:	20012eee 	.word	0x20012eee

08005d60 <__sinit>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	f7ff fff0 	bl	8005d48 <__sinit_lock_acquire>
 8005d68:	69a3      	ldr	r3, [r4, #24]
 8005d6a:	b11b      	cbz	r3, 8005d74 <__sinit+0x14>
 8005d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d70:	f7ff bff0 	b.w	8005d54 <__sinit_lock_release>
 8005d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d78:	6523      	str	r3, [r4, #80]	; 0x50
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <__sinit+0x68>)
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <__sinit+0x6c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	bf04      	itt	eq
 8005d86:	2301      	moveq	r3, #1
 8005d88:	61a3      	streq	r3, [r4, #24]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f820 	bl	8005dd0 <__sfp>
 8005d90:	6060      	str	r0, [r4, #4]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f81c 	bl	8005dd0 <__sfp>
 8005d98:	60a0      	str	r0, [r4, #8]
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 f818 	bl	8005dd0 <__sfp>
 8005da0:	2200      	movs	r2, #0
 8005da2:	60e0      	str	r0, [r4, #12]
 8005da4:	2104      	movs	r1, #4
 8005da6:	6860      	ldr	r0, [r4, #4]
 8005da8:	f7ff ff82 	bl	8005cb0 <std>
 8005dac:	68a0      	ldr	r0, [r4, #8]
 8005dae:	2201      	movs	r2, #1
 8005db0:	2109      	movs	r1, #9
 8005db2:	f7ff ff7d 	bl	8005cb0 <std>
 8005db6:	68e0      	ldr	r0, [r4, #12]
 8005db8:	2202      	movs	r2, #2
 8005dba:	2112      	movs	r1, #18
 8005dbc:	f7ff ff78 	bl	8005cb0 <std>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	61a3      	str	r3, [r4, #24]
 8005dc4:	e7d2      	b.n	8005d6c <__sinit+0xc>
 8005dc6:	bf00      	nop
 8005dc8:	08006c50 	.word	0x08006c50
 8005dcc:	08005cf9 	.word	0x08005cf9

08005dd0 <__sfp>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	f7ff ffac 	bl	8005d30 <__sfp_lock_acquire>
 8005dd8:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <__sfp+0x84>)
 8005dda:	681e      	ldr	r6, [r3, #0]
 8005ddc:	69b3      	ldr	r3, [r6, #24]
 8005dde:	b913      	cbnz	r3, 8005de6 <__sfp+0x16>
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff ffbd 	bl	8005d60 <__sinit>
 8005de6:	3648      	adds	r6, #72	; 0x48
 8005de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	d503      	bpl.n	8005df8 <__sfp+0x28>
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	b30b      	cbz	r3, 8005e38 <__sfp+0x68>
 8005df4:	6836      	ldr	r6, [r6, #0]
 8005df6:	e7f7      	b.n	8005de8 <__sfp+0x18>
 8005df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dfc:	b9d5      	cbnz	r5, 8005e34 <__sfp+0x64>
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <__sfp+0x88>)
 8005e00:	60e3      	str	r3, [r4, #12]
 8005e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e06:	6665      	str	r5, [r4, #100]	; 0x64
 8005e08:	f000 f847 	bl	8005e9a <__retarget_lock_init_recursive>
 8005e0c:	f7ff ff96 	bl	8005d3c <__sfp_lock_release>
 8005e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e18:	6025      	str	r5, [r4, #0]
 8005e1a:	61a5      	str	r5, [r4, #24]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e24:	f7ff ff24 	bl	8005c70 <memset>
 8005e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e30:	4620      	mov	r0, r4
 8005e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e34:	3468      	adds	r4, #104	; 0x68
 8005e36:	e7d9      	b.n	8005dec <__sfp+0x1c>
 8005e38:	2104      	movs	r1, #4
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f7ff ff62 	bl	8005d04 <__sfmoreglue>
 8005e40:	4604      	mov	r4, r0
 8005e42:	6030      	str	r0, [r6, #0]
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1d5      	bne.n	8005df4 <__sfp+0x24>
 8005e48:	f7ff ff78 	bl	8005d3c <__sfp_lock_release>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	e7ee      	b.n	8005e30 <__sfp+0x60>
 8005e52:	bf00      	nop
 8005e54:	08006c50 	.word	0x08006c50
 8005e58:	ffff0001 	.word	0xffff0001

08005e5c <_fwalk_reent>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4606      	mov	r6, r0
 8005e62:	4688      	mov	r8, r1
 8005e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e68:	2700      	movs	r7, #0
 8005e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8005e72:	d505      	bpl.n	8005e80 <_fwalk_reent+0x24>
 8005e74:	6824      	ldr	r4, [r4, #0]
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	d1f7      	bne.n	8005e6a <_fwalk_reent+0xe>
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e80:	89ab      	ldrh	r3, [r5, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d907      	bls.n	8005e96 <_fwalk_reent+0x3a>
 8005e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	d003      	beq.n	8005e96 <_fwalk_reent+0x3a>
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4630      	mov	r0, r6
 8005e92:	47c0      	blx	r8
 8005e94:	4307      	orrs	r7, r0
 8005e96:	3568      	adds	r5, #104	; 0x68
 8005e98:	e7e9      	b.n	8005e6e <_fwalk_reent+0x12>

08005e9a <__retarget_lock_init_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <__retarget_lock_acquire_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <__retarget_lock_release_recursive>:
 8005e9e:	4770      	bx	lr

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fb7a 	bl	80065a4 <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fb75 	bl	80065a4 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fb6a 	bl	80065a4 <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	20012ef4 	.word	0x20012ef4

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	2600      	movs	r6, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f000 fdbb 	bl	8006a84 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fb36 	bl	80065a4 <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 fd83 	bl	8006a90 <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f000 fd6a 	bl	8006a90 <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	20012ef0 	.word	0x20012ef0

08005fc8 <__sfputc_r>:
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	b410      	push	{r4}
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	da08      	bge.n	8005fe6 <__sfputc_r+0x1e>
 8005fd4:	6994      	ldr	r4, [r2, #24]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	db01      	blt.n	8005fde <__sfputc_r+0x16>
 8005fda:	290a      	cmp	r1, #10
 8005fdc:	d103      	bne.n	8005fe6 <__sfputc_r+0x1e>
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	f000 bb33 	b.w	800664c <__swbuf_r>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	1c58      	adds	r0, r3, #1
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	4608      	mov	r0, r1
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <__sfputs_r>:
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460f      	mov	r7, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	18d5      	adds	r5, r2, r3
 8006000:	42ac      	cmp	r4, r5
 8006002:	d101      	bne.n	8006008 <__sfputs_r+0x12>
 8006004:	2000      	movs	r0, #0
 8006006:	e007      	b.n	8006018 <__sfputs_r+0x22>
 8006008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600c:	463a      	mov	r2, r7
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffda 	bl	8005fc8 <__sfputc_r>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1f3      	bne.n	8006000 <__sfputs_r+0xa>
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800601c <_vfiprintf_r>:
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	b09d      	sub	sp, #116	; 0x74
 8006024:	4614      	mov	r4, r2
 8006026:	4698      	mov	r8, r3
 8006028:	4606      	mov	r6, r0
 800602a:	b118      	cbz	r0, 8006034 <_vfiprintf_r+0x18>
 800602c:	6983      	ldr	r3, [r0, #24]
 800602e:	b90b      	cbnz	r3, 8006034 <_vfiprintf_r+0x18>
 8006030:	f7ff fe96 	bl	8005d60 <__sinit>
 8006034:	4b89      	ldr	r3, [pc, #548]	; (800625c <_vfiprintf_r+0x240>)
 8006036:	429d      	cmp	r5, r3
 8006038:	d11b      	bne.n	8006072 <_vfiprintf_r+0x56>
 800603a:	6875      	ldr	r5, [r6, #4]
 800603c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	d405      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	059a      	lsls	r2, r3, #22
 8006046:	d402      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604a:	f7ff ff27 	bl	8005e9c <__retarget_lock_acquire_recursive>
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	071b      	lsls	r3, r3, #28
 8006052:	d501      	bpl.n	8006058 <_vfiprintf_r+0x3c>
 8006054:	692b      	ldr	r3, [r5, #16]
 8006056:	b9eb      	cbnz	r3, 8006094 <_vfiprintf_r+0x78>
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f000 fb5a 	bl	8006714 <__swsetup_r>
 8006060:	b1c0      	cbz	r0, 8006094 <_vfiprintf_r+0x78>
 8006062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006064:	07dc      	lsls	r4, r3, #31
 8006066:	d50e      	bpl.n	8006086 <_vfiprintf_r+0x6a>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b01d      	add	sp, #116	; 0x74
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	4b7b      	ldr	r3, [pc, #492]	; (8006260 <_vfiprintf_r+0x244>)
 8006074:	429d      	cmp	r5, r3
 8006076:	d101      	bne.n	800607c <_vfiprintf_r+0x60>
 8006078:	68b5      	ldr	r5, [r6, #8]
 800607a:	e7df      	b.n	800603c <_vfiprintf_r+0x20>
 800607c:	4b79      	ldr	r3, [pc, #484]	; (8006264 <_vfiprintf_r+0x248>)
 800607e:	429d      	cmp	r5, r3
 8006080:	bf08      	it	eq
 8006082:	68f5      	ldreq	r5, [r6, #12]
 8006084:	e7da      	b.n	800603c <_vfiprintf_r+0x20>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	0598      	lsls	r0, r3, #22
 800608a:	d4ed      	bmi.n	8006068 <_vfiprintf_r+0x4c>
 800608c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800608e:	f7ff ff06 	bl	8005e9e <__retarget_lock_release_recursive>
 8006092:	e7e9      	b.n	8006068 <_vfiprintf_r+0x4c>
 8006094:	2300      	movs	r3, #0
 8006096:	9309      	str	r3, [sp, #36]	; 0x24
 8006098:	2320      	movs	r3, #32
 800609a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800609e:	f8cd 800c 	str.w	r8, [sp, #12]
 80060a2:	2330      	movs	r3, #48	; 0x30
 80060a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006268 <_vfiprintf_r+0x24c>
 80060a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ac:	f04f 0901 	mov.w	r9, #1
 80060b0:	4623      	mov	r3, r4
 80060b2:	469a      	mov	sl, r3
 80060b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b8:	b10a      	cbz	r2, 80060be <_vfiprintf_r+0xa2>
 80060ba:	2a25      	cmp	r2, #37	; 0x25
 80060bc:	d1f9      	bne.n	80060b2 <_vfiprintf_r+0x96>
 80060be:	ebba 0b04 	subs.w	fp, sl, r4
 80060c2:	d00b      	beq.n	80060dc <_vfiprintf_r+0xc0>
 80060c4:	465b      	mov	r3, fp
 80060c6:	4622      	mov	r2, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ff93 	bl	8005ff6 <__sfputs_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	f000 80aa 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d8:	445a      	add	r2, fp
 80060da:	9209      	str	r2, [sp, #36]	; 0x24
 80060dc:	f89a 3000 	ldrb.w	r3, [sl]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80a2 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f0:	f10a 0a01 	add.w	sl, sl, #1
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060fc:	931a      	str	r3, [sp, #104]	; 0x68
 80060fe:	4654      	mov	r4, sl
 8006100:	2205      	movs	r2, #5
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	4858      	ldr	r0, [pc, #352]	; (8006268 <_vfiprintf_r+0x24c>)
 8006108:	f7fa f86a 	bl	80001e0 <memchr>
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	b9d8      	cbnz	r0, 8006148 <_vfiprintf_r+0x12c>
 8006110:	06d1      	lsls	r1, r2, #27
 8006112:	bf44      	itt	mi
 8006114:	2320      	movmi	r3, #32
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	0713      	lsls	r3, r2, #28
 800611c:	bf44      	itt	mi
 800611e:	232b      	movmi	r3, #43	; 0x2b
 8006120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006124:	f89a 3000 	ldrb.w	r3, [sl]
 8006128:	2b2a      	cmp	r3, #42	; 0x2a
 800612a:	d015      	beq.n	8006158 <_vfiprintf_r+0x13c>
 800612c:	9a07      	ldr	r2, [sp, #28]
 800612e:	4654      	mov	r4, sl
 8006130:	2000      	movs	r0, #0
 8006132:	f04f 0c0a 	mov.w	ip, #10
 8006136:	4621      	mov	r1, r4
 8006138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800613c:	3b30      	subs	r3, #48	; 0x30
 800613e:	2b09      	cmp	r3, #9
 8006140:	d94e      	bls.n	80061e0 <_vfiprintf_r+0x1c4>
 8006142:	b1b0      	cbz	r0, 8006172 <_vfiprintf_r+0x156>
 8006144:	9207      	str	r2, [sp, #28]
 8006146:	e014      	b.n	8006172 <_vfiprintf_r+0x156>
 8006148:	eba0 0308 	sub.w	r3, r0, r8
 800614c:	fa09 f303 	lsl.w	r3, r9, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	9304      	str	r3, [sp, #16]
 8006154:	46a2      	mov	sl, r4
 8006156:	e7d2      	b.n	80060fe <_vfiprintf_r+0xe2>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	1d19      	adds	r1, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9103      	str	r1, [sp, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfbb      	ittet	lt
 8006164:	425b      	neglt	r3, r3
 8006166:	f042 0202 	orrlt.w	r2, r2, #2
 800616a:	9307      	strge	r3, [sp, #28]
 800616c:	9307      	strlt	r3, [sp, #28]
 800616e:	bfb8      	it	lt
 8006170:	9204      	strlt	r2, [sp, #16]
 8006172:	7823      	ldrb	r3, [r4, #0]
 8006174:	2b2e      	cmp	r3, #46	; 0x2e
 8006176:	d10c      	bne.n	8006192 <_vfiprintf_r+0x176>
 8006178:	7863      	ldrb	r3, [r4, #1]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d135      	bne.n	80061ea <_vfiprintf_r+0x1ce>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	9203      	str	r2, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	f04f 33ff 	movlt.w	r3, #4294967295
 800618e:	3402      	adds	r4, #2
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006278 <_vfiprintf_r+0x25c>
 8006196:	7821      	ldrb	r1, [r4, #0]
 8006198:	2203      	movs	r2, #3
 800619a:	4650      	mov	r0, sl
 800619c:	f7fa f820 	bl	80001e0 <memchr>
 80061a0:	b140      	cbz	r0, 80061b4 <_vfiprintf_r+0x198>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	eba0 000a 	sub.w	r0, r0, sl
 80061a8:	fa03 f000 	lsl.w	r0, r3, r0
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	4303      	orrs	r3, r0
 80061b0:	3401      	adds	r4, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b8:	482c      	ldr	r0, [pc, #176]	; (800626c <_vfiprintf_r+0x250>)
 80061ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061be:	2206      	movs	r2, #6
 80061c0:	f7fa f80e 	bl	80001e0 <memchr>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d03f      	beq.n	8006248 <_vfiprintf_r+0x22c>
 80061c8:	4b29      	ldr	r3, [pc, #164]	; (8006270 <_vfiprintf_r+0x254>)
 80061ca:	bb1b      	cbnz	r3, 8006214 <_vfiprintf_r+0x1f8>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	3307      	adds	r3, #7
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	443b      	add	r3, r7
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	e767      	b.n	80060b0 <_vfiprintf_r+0x94>
 80061e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e4:	460c      	mov	r4, r1
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7a5      	b.n	8006136 <_vfiprintf_r+0x11a>
 80061ea:	2300      	movs	r3, #0
 80061ec:	3401      	adds	r4, #1
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0c0a 	mov.w	ip, #10
 80061f6:	4620      	mov	r0, r4
 80061f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fc:	3a30      	subs	r2, #48	; 0x30
 80061fe:	2a09      	cmp	r2, #9
 8006200:	d903      	bls.n	800620a <_vfiprintf_r+0x1ee>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <_vfiprintf_r+0x176>
 8006206:	9105      	str	r1, [sp, #20]
 8006208:	e7c3      	b.n	8006192 <_vfiprintf_r+0x176>
 800620a:	fb0c 2101 	mla	r1, ip, r1, r2
 800620e:	4604      	mov	r4, r0
 8006210:	2301      	movs	r3, #1
 8006212:	e7f0      	b.n	80061f6 <_vfiprintf_r+0x1da>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4b16      	ldr	r3, [pc, #88]	; (8006274 <_vfiprintf_r+0x258>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4630      	mov	r0, r6
 8006220:	f3af 8000 	nop.w
 8006224:	4607      	mov	r7, r0
 8006226:	1c78      	adds	r0, r7, #1
 8006228:	d1d6      	bne.n	80061d8 <_vfiprintf_r+0x1bc>
 800622a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622c:	07d9      	lsls	r1, r3, #31
 800622e:	d405      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006230:	89ab      	ldrh	r3, [r5, #12]
 8006232:	059a      	lsls	r2, r3, #22
 8006234:	d402      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006238:	f7ff fe31 	bl	8005e9e <__retarget_lock_release_recursive>
 800623c:	89ab      	ldrh	r3, [r5, #12]
 800623e:	065b      	lsls	r3, r3, #25
 8006240:	f53f af12 	bmi.w	8006068 <_vfiprintf_r+0x4c>
 8006244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006246:	e711      	b.n	800606c <_vfiprintf_r+0x50>
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <_vfiprintf_r+0x258>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4630      	mov	r0, r6
 8006254:	f000 f880 	bl	8006358 <_printf_i>
 8006258:	e7e4      	b.n	8006224 <_vfiprintf_r+0x208>
 800625a:	bf00      	nop
 800625c:	08006c74 	.word	0x08006c74
 8006260:	08006c94 	.word	0x08006c94
 8006264:	08006c54 	.word	0x08006c54
 8006268:	08006cb4 	.word	0x08006cb4
 800626c:	08006cbe 	.word	0x08006cbe
 8006270:	00000000 	.word	0x00000000
 8006274:	08005ff7 	.word	0x08005ff7
 8006278:	08006cba 	.word	0x08006cba

0800627c <_printf_common>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	4616      	mov	r6, r2
 8006282:	4699      	mov	r9, r3
 8006284:	688a      	ldr	r2, [r1, #8]
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800628c:	4293      	cmp	r3, r2
 800628e:	bfb8      	it	lt
 8006290:	4613      	movlt	r3, r2
 8006292:	6033      	str	r3, [r6, #0]
 8006294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006298:	4607      	mov	r7, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b10a      	cbz	r2, 80062a2 <_printf_common+0x26>
 800629e:	3301      	adds	r3, #1
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	0699      	lsls	r1, r3, #26
 80062a6:	bf42      	ittt	mi
 80062a8:	6833      	ldrmi	r3, [r6, #0]
 80062aa:	3302      	addmi	r3, #2
 80062ac:	6033      	strmi	r3, [r6, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	f015 0506 	ands.w	r5, r5, #6
 80062b4:	d106      	bne.n	80062c4 <_printf_common+0x48>
 80062b6:	f104 0a19 	add.w	sl, r4, #25
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	6832      	ldr	r2, [r6, #0]
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc26      	bgt.n	8006312 <_printf_common+0x96>
 80062c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c8:	1e13      	subs	r3, r2, #0
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	bf18      	it	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	0692      	lsls	r2, r2, #26
 80062d2:	d42b      	bmi.n	800632c <_printf_common+0xb0>
 80062d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d01e      	beq.n	8006320 <_printf_common+0xa4>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	68e5      	ldr	r5, [r4, #12]
 80062e6:	6832      	ldr	r2, [r6, #0]
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	bf08      	it	eq
 80062f0:	1aad      	subeq	r5, r5, r2
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	bf0c      	ite	eq
 80062f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062fc:	2500      	movne	r5, #0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfc4      	itt	gt
 8006302:	1a9b      	subgt	r3, r3, r2
 8006304:	18ed      	addgt	r5, r5, r3
 8006306:	2600      	movs	r6, #0
 8006308:	341a      	adds	r4, #26
 800630a:	42b5      	cmp	r5, r6
 800630c:	d11a      	bne.n	8006344 <_printf_common+0xc8>
 800630e:	2000      	movs	r0, #0
 8006310:	e008      	b.n	8006324 <_printf_common+0xa8>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4649      	mov	r1, r9
 8006318:	4638      	mov	r0, r7
 800631a:	47c0      	blx	r8
 800631c:	3001      	adds	r0, #1
 800631e:	d103      	bne.n	8006328 <_printf_common+0xac>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	3501      	adds	r5, #1
 800632a:	e7c6      	b.n	80062ba <_printf_common+0x3e>
 800632c:	18e1      	adds	r1, r4, r3
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	2030      	movs	r0, #48	; 0x30
 8006332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006336:	4422      	add	r2, r4
 8006338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800633c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006340:	3302      	adds	r3, #2
 8006342:	e7c7      	b.n	80062d4 <_printf_common+0x58>
 8006344:	2301      	movs	r3, #1
 8006346:	4622      	mov	r2, r4
 8006348:	4649      	mov	r1, r9
 800634a:	4638      	mov	r0, r7
 800634c:	47c0      	blx	r8
 800634e:	3001      	adds	r0, #1
 8006350:	d0e6      	beq.n	8006320 <_printf_common+0xa4>
 8006352:	3601      	adds	r6, #1
 8006354:	e7d9      	b.n	800630a <_printf_common+0x8e>
	...

08006358 <_printf_i>:
 8006358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	7e0f      	ldrb	r7, [r1, #24]
 800635e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006360:	2f78      	cmp	r7, #120	; 0x78
 8006362:	4691      	mov	r9, r2
 8006364:	4680      	mov	r8, r0
 8006366:	460c      	mov	r4, r1
 8006368:	469a      	mov	sl, r3
 800636a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800636e:	d807      	bhi.n	8006380 <_printf_i+0x28>
 8006370:	2f62      	cmp	r7, #98	; 0x62
 8006372:	d80a      	bhi.n	800638a <_printf_i+0x32>
 8006374:	2f00      	cmp	r7, #0
 8006376:	f000 80d8 	beq.w	800652a <_printf_i+0x1d2>
 800637a:	2f58      	cmp	r7, #88	; 0x58
 800637c:	f000 80a3 	beq.w	80064c6 <_printf_i+0x16e>
 8006380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006388:	e03a      	b.n	8006400 <_printf_i+0xa8>
 800638a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800638e:	2b15      	cmp	r3, #21
 8006390:	d8f6      	bhi.n	8006380 <_printf_i+0x28>
 8006392:	a101      	add	r1, pc, #4	; (adr r1, 8006398 <_printf_i+0x40>)
 8006394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006398:	080063f1 	.word	0x080063f1
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006381 	.word	0x08006381
 80063a4:	08006381 	.word	0x08006381
 80063a8:	08006381 	.word	0x08006381
 80063ac:	08006381 	.word	0x08006381
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006381 	.word	0x08006381
 80063b8:	08006381 	.word	0x08006381
 80063bc:	08006381 	.word	0x08006381
 80063c0:	08006381 	.word	0x08006381
 80063c4:	08006511 	.word	0x08006511
 80063c8:	08006435 	.word	0x08006435
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	08006381 	.word	0x08006381
 80063d4:	08006381 	.word	0x08006381
 80063d8:	08006533 	.word	0x08006533
 80063dc:	08006381 	.word	0x08006381
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006381 	.word	0x08006381
 80063e8:	08006381 	.word	0x08006381
 80063ec:	080064fb 	.word	0x080064fb
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	602a      	str	r2, [r5, #0]
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006400:	2301      	movs	r3, #1
 8006402:	e0a3      	b.n	800654c <_printf_i+0x1f4>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	6829      	ldr	r1, [r5, #0]
 8006408:	0606      	lsls	r6, r0, #24
 800640a:	f101 0304 	add.w	r3, r1, #4
 800640e:	d50a      	bpl.n	8006426 <_printf_i+0xce>
 8006410:	680e      	ldr	r6, [r1, #0]
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	2e00      	cmp	r6, #0
 8006416:	da03      	bge.n	8006420 <_printf_i+0xc8>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	4276      	negs	r6, r6
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	485e      	ldr	r0, [pc, #376]	; (800659c <_printf_i+0x244>)
 8006422:	230a      	movs	r3, #10
 8006424:	e019      	b.n	800645a <_printf_i+0x102>
 8006426:	680e      	ldr	r6, [r1, #0]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642e:	bf18      	it	ne
 8006430:	b236      	sxthne	r6, r6
 8006432:	e7ef      	b.n	8006414 <_printf_i+0xbc>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6029      	str	r1, [r5, #0]
 800643c:	0601      	lsls	r1, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xec>
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0xf2>
 8006444:	0646      	lsls	r6, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xe8>
 8006448:	881e      	ldrh	r6, [r3, #0]
 800644a:	4854      	ldr	r0, [pc, #336]	; (800659c <_printf_i+0x244>)
 800644c:	2f6f      	cmp	r7, #111	; 0x6f
 800644e:	bf0c      	ite	eq
 8006450:	2308      	moveq	r3, #8
 8006452:	230a      	movne	r3, #10
 8006454:	2100      	movs	r1, #0
 8006456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800645a:	6865      	ldr	r5, [r4, #4]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	2d00      	cmp	r5, #0
 8006460:	bfa2      	ittt	ge
 8006462:	6821      	ldrge	r1, [r4, #0]
 8006464:	f021 0104 	bicge.w	r1, r1, #4
 8006468:	6021      	strge	r1, [r4, #0]
 800646a:	b90e      	cbnz	r6, 8006470 <_printf_i+0x118>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d04d      	beq.n	800650c <_printf_i+0x1b4>
 8006470:	4615      	mov	r5, r2
 8006472:	fbb6 f1f3 	udiv	r1, r6, r3
 8006476:	fb03 6711 	mls	r7, r3, r1, r6
 800647a:	5dc7      	ldrb	r7, [r0, r7]
 800647c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006480:	4637      	mov	r7, r6
 8006482:	42bb      	cmp	r3, r7
 8006484:	460e      	mov	r6, r1
 8006486:	d9f4      	bls.n	8006472 <_printf_i+0x11a>
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10b      	bne.n	80064a4 <_printf_i+0x14c>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	07de      	lsls	r6, r3, #31
 8006490:	d508      	bpl.n	80064a4 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	bfde      	ittt	le
 800649a:	2330      	movle	r3, #48	; 0x30
 800649c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	f8cd a000 	str.w	sl, [sp]
 80064ac:	464b      	mov	r3, r9
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fee2 	bl	800627c <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d14c      	bne.n	8006556 <_printf_i+0x1fe>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b004      	add	sp, #16
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	4835      	ldr	r0, [pc, #212]	; (800659c <_printf_i+0x244>)
 80064c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064d4:	6029      	str	r1, [r5, #0]
 80064d6:	061d      	lsls	r5, r3, #24
 80064d8:	d514      	bpl.n	8006504 <_printf_i+0x1ac>
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	bf44      	itt	mi
 80064de:	f043 0320 	orrmi.w	r3, r3, #32
 80064e2:	6023      	strmi	r3, [r4, #0]
 80064e4:	b91e      	cbnz	r6, 80064ee <_printf_i+0x196>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2310      	movs	r3, #16
 80064f0:	e7b0      	b.n	8006454 <_printf_i+0xfc>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	2378      	movs	r3, #120	; 0x78
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <_printf_i+0x248>)
 80064fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006502:	e7e3      	b.n	80064cc <_printf_i+0x174>
 8006504:	0659      	lsls	r1, r3, #25
 8006506:	bf48      	it	mi
 8006508:	b2b6      	uxthmi	r6, r6
 800650a:	e7e6      	b.n	80064da <_printf_i+0x182>
 800650c:	4615      	mov	r5, r2
 800650e:	e7bb      	b.n	8006488 <_printf_i+0x130>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	6826      	ldr	r6, [r4, #0]
 8006514:	6961      	ldr	r1, [r4, #20]
 8006516:	1d18      	adds	r0, r3, #4
 8006518:	6028      	str	r0, [r5, #0]
 800651a:	0635      	lsls	r5, r6, #24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	d501      	bpl.n	8006524 <_printf_i+0x1cc>
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0x1d2>
 8006524:	0670      	lsls	r0, r6, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0x1c8>
 8006528:	8019      	strh	r1, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	4615      	mov	r5, r2
 8006530:	e7ba      	b.n	80064a8 <_printf_i+0x150>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	2100      	movs	r1, #0
 800653e:	4628      	mov	r0, r5
 8006540:	f7f9 fe4e 	bl	80001e0 <memchr>
 8006544:	b108      	cbz	r0, 800654a <_printf_i+0x1f2>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	6060      	str	r0, [r4, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	2300      	movs	r3, #0
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	e7a8      	b.n	80064a8 <_printf_i+0x150>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	462a      	mov	r2, r5
 800655a:	4649      	mov	r1, r9
 800655c:	4640      	mov	r0, r8
 800655e:	47d0      	blx	sl
 8006560:	3001      	adds	r0, #1
 8006562:	d0ab      	beq.n	80064bc <_printf_i+0x164>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	079b      	lsls	r3, r3, #30
 8006568:	d413      	bmi.n	8006592 <_printf_i+0x23a>
 800656a:	68e0      	ldr	r0, [r4, #12]
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	4298      	cmp	r0, r3
 8006570:	bfb8      	it	lt
 8006572:	4618      	movlt	r0, r3
 8006574:	e7a4      	b.n	80064c0 <_printf_i+0x168>
 8006576:	2301      	movs	r3, #1
 8006578:	4632      	mov	r2, r6
 800657a:	4649      	mov	r1, r9
 800657c:	4640      	mov	r0, r8
 800657e:	47d0      	blx	sl
 8006580:	3001      	adds	r0, #1
 8006582:	d09b      	beq.n	80064bc <_printf_i+0x164>
 8006584:	3501      	adds	r5, #1
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	9903      	ldr	r1, [sp, #12]
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	42ab      	cmp	r3, r5
 800658e:	dcf2      	bgt.n	8006576 <_printf_i+0x21e>
 8006590:	e7eb      	b.n	800656a <_printf_i+0x212>
 8006592:	2500      	movs	r5, #0
 8006594:	f104 0619 	add.w	r6, r4, #25
 8006598:	e7f5      	b.n	8006586 <_printf_i+0x22e>
 800659a:	bf00      	nop
 800659c:	08006cc5 	.word	0x08006cc5
 80065a0:	08006cd6 	.word	0x08006cd6

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	; (80065c0 <_sbrk_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f000 faf4 	bl	8006b9c <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20012ef8 	.word	0x20012ef8

080065c4 <__sread>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	460c      	mov	r4, r1
 80065c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065cc:	f000 fab2 	bl	8006b34 <_read_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	bfab      	itete	ge
 80065d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065d6:	89a3      	ldrhlt	r3, [r4, #12]
 80065d8:	181b      	addge	r3, r3, r0
 80065da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065de:	bfac      	ite	ge
 80065e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80065e2:	81a3      	strhlt	r3, [r4, #12]
 80065e4:	bd10      	pop	{r4, pc}

080065e6 <__swrite>:
 80065e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ea:	461f      	mov	r7, r3
 80065ec:	898b      	ldrh	r3, [r1, #12]
 80065ee:	05db      	lsls	r3, r3, #23
 80065f0:	4605      	mov	r5, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4616      	mov	r6, r2
 80065f6:	d505      	bpl.n	8006604 <__swrite+0x1e>
 80065f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fc:	2302      	movs	r3, #2
 80065fe:	2200      	movs	r2, #0
 8006600:	f000 f9c8 	bl	8006994 <_lseek_r>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	4632      	mov	r2, r6
 8006612:	463b      	mov	r3, r7
 8006614:	4628      	mov	r0, r5
 8006616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661a:	f000 b869 	b.w	80066f0 <_write_r>

0800661e <__sseek>:
 800661e:	b510      	push	{r4, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006626:	f000 f9b5 	bl	8006994 <_lseek_r>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	bf15      	itete	ne
 8006630:	6560      	strne	r0, [r4, #84]	; 0x54
 8006632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800663a:	81a3      	strheq	r3, [r4, #12]
 800663c:	bf18      	it	ne
 800663e:	81a3      	strhne	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__sclose>:
 8006642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006646:	f000 b8d3 	b.w	80067f0 <_close_r>
	...

0800664c <__swbuf_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	460e      	mov	r6, r1
 8006650:	4614      	mov	r4, r2
 8006652:	4605      	mov	r5, r0
 8006654:	b118      	cbz	r0, 800665e <__swbuf_r+0x12>
 8006656:	6983      	ldr	r3, [r0, #24]
 8006658:	b90b      	cbnz	r3, 800665e <__swbuf_r+0x12>
 800665a:	f7ff fb81 	bl	8005d60 <__sinit>
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <__swbuf_r+0x98>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d12b      	bne.n	80066bc <__swbuf_r+0x70>
 8006664:	686c      	ldr	r4, [r5, #4]
 8006666:	69a3      	ldr	r3, [r4, #24]
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	071a      	lsls	r2, r3, #28
 800666e:	d52f      	bpl.n	80066d0 <__swbuf_r+0x84>
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b36b      	cbz	r3, 80066d0 <__swbuf_r+0x84>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1ac0      	subs	r0, r0, r3
 800667a:	6963      	ldr	r3, [r4, #20]
 800667c:	b2f6      	uxtb	r6, r6
 800667e:	4283      	cmp	r3, r0
 8006680:	4637      	mov	r7, r6
 8006682:	dc04      	bgt.n	800668e <__swbuf_r+0x42>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f948 	bl	800691c <_fflush_r>
 800668c:	bb30      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	3b01      	subs	r3, #1
 8006692:	60a3      	str	r3, [r4, #8]
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	701e      	strb	r6, [r3, #0]
 800669c:	6963      	ldr	r3, [r4, #20]
 800669e:	3001      	adds	r0, #1
 80066a0:	4283      	cmp	r3, r0
 80066a2:	d004      	beq.n	80066ae <__swbuf_r+0x62>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d506      	bpl.n	80066b8 <__swbuf_r+0x6c>
 80066aa:	2e0a      	cmp	r6, #10
 80066ac:	d104      	bne.n	80066b8 <__swbuf_r+0x6c>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f933 	bl	800691c <_fflush_r>
 80066b6:	b988      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 80066b8:	4638      	mov	r0, r7
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <__swbuf_r+0x9c>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d101      	bne.n	80066c6 <__swbuf_r+0x7a>
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	e7cf      	b.n	8006666 <__swbuf_r+0x1a>
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <__swbuf_r+0xa0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	bf08      	it	eq
 80066cc:	68ec      	ldreq	r4, [r5, #12]
 80066ce:	e7ca      	b.n	8006666 <__swbuf_r+0x1a>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f81e 	bl	8006714 <__swsetup_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0cb      	beq.n	8006674 <__swbuf_r+0x28>
 80066dc:	f04f 37ff 	mov.w	r7, #4294967295
 80066e0:	e7ea      	b.n	80066b8 <__swbuf_r+0x6c>
 80066e2:	bf00      	nop
 80066e4:	08006c74 	.word	0x08006c74
 80066e8:	08006c94 	.word	0x08006c94
 80066ec:	08006c54 	.word	0x08006c54

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_write_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa fe19 	bl	8001336 <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20012ef8 	.word	0x20012ef8

08006714 <__swsetup_r>:
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <__swsetup_r+0xcc>)
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	4606      	mov	r6, r0
 800671c:	460c      	mov	r4, r1
 800671e:	b125      	cbz	r5, 800672a <__swsetup_r+0x16>
 8006720:	69ab      	ldr	r3, [r5, #24]
 8006722:	b913      	cbnz	r3, 800672a <__swsetup_r+0x16>
 8006724:	4628      	mov	r0, r5
 8006726:	f7ff fb1b 	bl	8005d60 <__sinit>
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <__swsetup_r+0xd0>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d10f      	bne.n	8006750 <__swsetup_r+0x3c>
 8006730:	686c      	ldr	r4, [r5, #4]
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006738:	0719      	lsls	r1, r3, #28
 800673a:	d42c      	bmi.n	8006796 <__swsetup_r+0x82>
 800673c:	06dd      	lsls	r5, r3, #27
 800673e:	d411      	bmi.n	8006764 <__swsetup_r+0x50>
 8006740:	2309      	movs	r3, #9
 8006742:	6033      	str	r3, [r6, #0]
 8006744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	e03e      	b.n	80067ce <__swsetup_r+0xba>
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <__swsetup_r+0xd4>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d101      	bne.n	800675a <__swsetup_r+0x46>
 8006756:	68ac      	ldr	r4, [r5, #8]
 8006758:	e7eb      	b.n	8006732 <__swsetup_r+0x1e>
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <__swsetup_r+0xd8>)
 800675c:	429c      	cmp	r4, r3
 800675e:	bf08      	it	eq
 8006760:	68ec      	ldreq	r4, [r5, #12]
 8006762:	e7e6      	b.n	8006732 <__swsetup_r+0x1e>
 8006764:	0758      	lsls	r0, r3, #29
 8006766:	d512      	bpl.n	800678e <__swsetup_r+0x7a>
 8006768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676a:	b141      	cbz	r1, 800677e <__swsetup_r+0x6a>
 800676c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006770:	4299      	cmp	r1, r3
 8006772:	d002      	beq.n	800677a <__swsetup_r+0x66>
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f991 	bl	8006a9c <_free_r>
 800677a:	2300      	movs	r3, #0
 800677c:	6363      	str	r3, [r4, #52]	; 0x34
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	2300      	movs	r3, #0
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	b94b      	cbnz	r3, 80067ae <__swsetup_r+0x9a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d003      	beq.n	80067ae <__swsetup_r+0x9a>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f92b 	bl	8006a04 <__smakebuf_r>
 80067ae:	89a0      	ldrh	r0, [r4, #12]
 80067b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067b4:	f010 0301 	ands.w	r3, r0, #1
 80067b8:	d00a      	beq.n	80067d0 <__swsetup_r+0xbc>
 80067ba:	2300      	movs	r3, #0
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	6963      	ldr	r3, [r4, #20]
 80067c0:	425b      	negs	r3, r3
 80067c2:	61a3      	str	r3, [r4, #24]
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	b943      	cbnz	r3, 80067da <__swsetup_r+0xc6>
 80067c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067cc:	d1ba      	bne.n	8006744 <__swsetup_r+0x30>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	0781      	lsls	r1, r0, #30
 80067d2:	bf58      	it	pl
 80067d4:	6963      	ldrpl	r3, [r4, #20]
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	e7f4      	b.n	80067c4 <__swsetup_r+0xb0>
 80067da:	2000      	movs	r0, #0
 80067dc:	e7f7      	b.n	80067ce <__swsetup_r+0xba>
 80067de:	bf00      	nop
 80067e0:	20000014 	.word	0x20000014
 80067e4:	08006c74 	.word	0x08006c74
 80067e8:	08006c94 	.word	0x08006c94
 80067ec:	08006c54 	.word	0x08006c54

080067f0 <_close_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	; (800680c <_close_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fa fdb7 	bl	800136e <_close>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_close_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_close_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20012ef8 	.word	0x20012ef8

08006810 <__sflush_r>:
 8006810:	898a      	ldrh	r2, [r1, #12]
 8006812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006816:	4605      	mov	r5, r0
 8006818:	0710      	lsls	r0, r2, #28
 800681a:	460c      	mov	r4, r1
 800681c:	d458      	bmi.n	80068d0 <__sflush_r+0xc0>
 800681e:	684b      	ldr	r3, [r1, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc05      	bgt.n	8006830 <__sflush_r+0x20>
 8006824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	dc02      	bgt.n	8006830 <__sflush_r+0x20>
 800682a:	2000      	movs	r0, #0
 800682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006832:	2e00      	cmp	r6, #0
 8006834:	d0f9      	beq.n	800682a <__sflush_r+0x1a>
 8006836:	2300      	movs	r3, #0
 8006838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800683c:	682f      	ldr	r7, [r5, #0]
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	d032      	beq.n	80068a8 <__sflush_r+0x98>
 8006842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	075a      	lsls	r2, r3, #29
 8006848:	d505      	bpl.n	8006856 <__sflush_r+0x46>
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006850:	b10b      	cbz	r3, 8006856 <__sflush_r+0x46>
 8006852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006854:	1ac0      	subs	r0, r0, r3
 8006856:	2300      	movs	r3, #0
 8006858:	4602      	mov	r2, r0
 800685a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800685c:	6a21      	ldr	r1, [r4, #32]
 800685e:	4628      	mov	r0, r5
 8006860:	47b0      	blx	r6
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	d106      	bne.n	8006876 <__sflush_r+0x66>
 8006868:	6829      	ldr	r1, [r5, #0]
 800686a:	291d      	cmp	r1, #29
 800686c:	d82c      	bhi.n	80068c8 <__sflush_r+0xb8>
 800686e:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <__sflush_r+0x108>)
 8006870:	40ca      	lsrs	r2, r1
 8006872:	07d6      	lsls	r6, r2, #31
 8006874:	d528      	bpl.n	80068c8 <__sflush_r+0xb8>
 8006876:	2200      	movs	r2, #0
 8006878:	6062      	str	r2, [r4, #4]
 800687a:	04d9      	lsls	r1, r3, #19
 800687c:	6922      	ldr	r2, [r4, #16]
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	d504      	bpl.n	800688c <__sflush_r+0x7c>
 8006882:	1c42      	adds	r2, r0, #1
 8006884:	d101      	bne.n	800688a <__sflush_r+0x7a>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b903      	cbnz	r3, 800688c <__sflush_r+0x7c>
 800688a:	6560      	str	r0, [r4, #84]	; 0x54
 800688c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688e:	602f      	str	r7, [r5, #0]
 8006890:	2900      	cmp	r1, #0
 8006892:	d0ca      	beq.n	800682a <__sflush_r+0x1a>
 8006894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006898:	4299      	cmp	r1, r3
 800689a:	d002      	beq.n	80068a2 <__sflush_r+0x92>
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f8fd 	bl	8006a9c <_free_r>
 80068a2:	2000      	movs	r0, #0
 80068a4:	6360      	str	r0, [r4, #52]	; 0x34
 80068a6:	e7c1      	b.n	800682c <__sflush_r+0x1c>
 80068a8:	6a21      	ldr	r1, [r4, #32]
 80068aa:	2301      	movs	r3, #1
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b0      	blx	r6
 80068b0:	1c41      	adds	r1, r0, #1
 80068b2:	d1c7      	bne.n	8006844 <__sflush_r+0x34>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c4      	beq.n	8006844 <__sflush_r+0x34>
 80068ba:	2b1d      	cmp	r3, #29
 80068bc:	d001      	beq.n	80068c2 <__sflush_r+0xb2>
 80068be:	2b16      	cmp	r3, #22
 80068c0:	d101      	bne.n	80068c6 <__sflush_r+0xb6>
 80068c2:	602f      	str	r7, [r5, #0]
 80068c4:	e7b1      	b.n	800682a <__sflush_r+0x1a>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	e7ad      	b.n	800682c <__sflush_r+0x1c>
 80068d0:	690f      	ldr	r7, [r1, #16]
 80068d2:	2f00      	cmp	r7, #0
 80068d4:	d0a9      	beq.n	800682a <__sflush_r+0x1a>
 80068d6:	0793      	lsls	r3, r2, #30
 80068d8:	680e      	ldr	r6, [r1, #0]
 80068da:	bf08      	it	eq
 80068dc:	694b      	ldreq	r3, [r1, #20]
 80068de:	600f      	str	r7, [r1, #0]
 80068e0:	bf18      	it	ne
 80068e2:	2300      	movne	r3, #0
 80068e4:	eba6 0807 	sub.w	r8, r6, r7
 80068e8:	608b      	str	r3, [r1, #8]
 80068ea:	f1b8 0f00 	cmp.w	r8, #0
 80068ee:	dd9c      	ble.n	800682a <__sflush_r+0x1a>
 80068f0:	6a21      	ldr	r1, [r4, #32]
 80068f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068f4:	4643      	mov	r3, r8
 80068f6:	463a      	mov	r2, r7
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b0      	blx	r6
 80068fc:	2800      	cmp	r0, #0
 80068fe:	dc06      	bgt.n	800690e <__sflush_r+0xfe>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e78e      	b.n	800682c <__sflush_r+0x1c>
 800690e:	4407      	add	r7, r0
 8006910:	eba8 0800 	sub.w	r8, r8, r0
 8006914:	e7e9      	b.n	80068ea <__sflush_r+0xda>
 8006916:	bf00      	nop
 8006918:	20400001 	.word	0x20400001

0800691c <_fflush_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	690b      	ldr	r3, [r1, #16]
 8006920:	4605      	mov	r5, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b913      	cbnz	r3, 800692c <_fflush_r+0x10>
 8006926:	2500      	movs	r5, #0
 8006928:	4628      	mov	r0, r5
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	b118      	cbz	r0, 8006936 <_fflush_r+0x1a>
 800692e:	6983      	ldr	r3, [r0, #24]
 8006930:	b90b      	cbnz	r3, 8006936 <_fflush_r+0x1a>
 8006932:	f7ff fa15 	bl	8005d60 <__sinit>
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <_fflush_r+0x6c>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d11b      	bne.n	8006974 <_fflush_r+0x58>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0ef      	beq.n	8006926 <_fflush_r+0xa>
 8006946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006948:	07d0      	lsls	r0, r2, #31
 800694a:	d404      	bmi.n	8006956 <_fflush_r+0x3a>
 800694c:	0599      	lsls	r1, r3, #22
 800694e:	d402      	bmi.n	8006956 <_fflush_r+0x3a>
 8006950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006952:	f7ff faa3 	bl	8005e9c <__retarget_lock_acquire_recursive>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	f7ff ff59 	bl	8006810 <__sflush_r>
 800695e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006960:	07da      	lsls	r2, r3, #31
 8006962:	4605      	mov	r5, r0
 8006964:	d4e0      	bmi.n	8006928 <_fflush_r+0xc>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d4dd      	bmi.n	8006928 <_fflush_r+0xc>
 800696c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696e:	f7ff fa96 	bl	8005e9e <__retarget_lock_release_recursive>
 8006972:	e7d9      	b.n	8006928 <_fflush_r+0xc>
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <_fflush_r+0x70>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d101      	bne.n	800697e <_fflush_r+0x62>
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	e7df      	b.n	800693e <_fflush_r+0x22>
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <_fflush_r+0x74>)
 8006980:	429c      	cmp	r4, r3
 8006982:	bf08      	it	eq
 8006984:	68ec      	ldreq	r4, [r5, #12]
 8006986:	e7da      	b.n	800693e <_fflush_r+0x22>
 8006988:	08006c74 	.word	0x08006c74
 800698c:	08006c94 	.word	0x08006c94
 8006990:	08006c54 	.word	0x08006c54

08006994 <_lseek_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	; (80069b4 <_lseek_r+0x20>)
 8006998:	4604      	mov	r4, r0
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fa fd0a 	bl	80013bc <_lseek>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_lseek_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_lseek_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20012ef8 	.word	0x20012ef8

080069b8 <__swhatbuf_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	460e      	mov	r6, r1
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	b096      	sub	sp, #88	; 0x58
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	da08      	bge.n	80069dc <__swhatbuf_r+0x24>
 80069ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	602a      	str	r2, [r5, #0]
 80069d2:	061a      	lsls	r2, r3, #24
 80069d4:	d410      	bmi.n	80069f8 <__swhatbuf_r+0x40>
 80069d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069da:	e00e      	b.n	80069fa <__swhatbuf_r+0x42>
 80069dc:	466a      	mov	r2, sp
 80069de:	f000 f8bb 	bl	8006b58 <_fstat_r>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	dbf1      	blt.n	80069ca <__swhatbuf_r+0x12>
 80069e6:	9a01      	ldr	r2, [sp, #4]
 80069e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069f0:	425a      	negs	r2, r3
 80069f2:	415a      	adcs	r2, r3
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	e7ee      	b.n	80069d6 <__swhatbuf_r+0x1e>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	2000      	movs	r0, #0
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	b016      	add	sp, #88	; 0x58
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a04 <__smakebuf_r>:
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a08:	079d      	lsls	r5, r3, #30
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	d507      	bpl.n	8006a20 <__smakebuf_r+0x1c>
 8006a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	6163      	str	r3, [r4, #20]
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	ab01      	add	r3, sp, #4
 8006a22:	466a      	mov	r2, sp
 8006a24:	f7ff ffc8 	bl	80069b8 <__swhatbuf_r>
 8006a28:	9900      	ldr	r1, [sp, #0]
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff fa57 	bl	8005ee0 <_malloc_r>
 8006a32:	b948      	cbnz	r0, 8006a48 <__smakebuf_r+0x44>
 8006a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a38:	059a      	lsls	r2, r3, #22
 8006a3a:	d4ef      	bmi.n	8006a1c <__smakebuf_r+0x18>
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	e7e3      	b.n	8006a10 <__smakebuf_r+0xc>
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <__smakebuf_r+0x7c>)
 8006a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	6020      	str	r0, [r4, #0]
 8006a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	9b00      	ldr	r3, [sp, #0]
 8006a58:	6163      	str	r3, [r4, #20]
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	6120      	str	r0, [r4, #16]
 8006a5e:	b15b      	cbz	r3, 8006a78 <__smakebuf_r+0x74>
 8006a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f889 	bl	8006b7c <_isatty_r>
 8006a6a:	b128      	cbz	r0, 8006a78 <__smakebuf_r+0x74>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	89a0      	ldrh	r0, [r4, #12]
 8006a7a:	4305      	orrs	r5, r0
 8006a7c:	81a5      	strh	r5, [r4, #12]
 8006a7e:	e7cd      	b.n	8006a1c <__smakebuf_r+0x18>
 8006a80:	08005cf9 	.word	0x08005cf9

08006a84 <__malloc_lock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_lock+0x8>)
 8006a86:	f7ff ba09 	b.w	8005e9c <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20012eec 	.word	0x20012eec

08006a90 <__malloc_unlock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__malloc_unlock+0x8>)
 8006a92:	f7ff ba04 	b.w	8005e9e <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	20012eec 	.word	0x20012eec

08006a9c <_free_r>:
 8006a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	d044      	beq.n	8006b2c <_free_r+0x90>
 8006aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa6:	9001      	str	r0, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8006aae:	bfb8      	it	lt
 8006ab0:	18e4      	addlt	r4, r4, r3
 8006ab2:	f7ff ffe7 	bl	8006a84 <__malloc_lock>
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <_free_r+0x94>)
 8006ab8:	9801      	ldr	r0, [sp, #4]
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	b933      	cbnz	r3, 8006acc <_free_r+0x30>
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	6014      	str	r4, [r2, #0]
 8006ac2:	b003      	add	sp, #12
 8006ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac8:	f7ff bfe2 	b.w	8006a90 <__malloc_unlock>
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	d908      	bls.n	8006ae2 <_free_r+0x46>
 8006ad0:	6825      	ldr	r5, [r4, #0]
 8006ad2:	1961      	adds	r1, r4, r5
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	bf01      	itttt	eq
 8006ad8:	6819      	ldreq	r1, [r3, #0]
 8006ada:	685b      	ldreq	r3, [r3, #4]
 8006adc:	1949      	addeq	r1, r1, r5
 8006ade:	6021      	streq	r1, [r4, #0]
 8006ae0:	e7ed      	b.n	8006abe <_free_r+0x22>
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	b10b      	cbz	r3, 8006aec <_free_r+0x50>
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d9fa      	bls.n	8006ae2 <_free_r+0x46>
 8006aec:	6811      	ldr	r1, [r2, #0]
 8006aee:	1855      	adds	r5, r2, r1
 8006af0:	42a5      	cmp	r5, r4
 8006af2:	d10b      	bne.n	8006b0c <_free_r+0x70>
 8006af4:	6824      	ldr	r4, [r4, #0]
 8006af6:	4421      	add	r1, r4
 8006af8:	1854      	adds	r4, r2, r1
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	d1e0      	bne.n	8006ac2 <_free_r+0x26>
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	6053      	str	r3, [r2, #4]
 8006b06:	4421      	add	r1, r4
 8006b08:	6011      	str	r1, [r2, #0]
 8006b0a:	e7da      	b.n	8006ac2 <_free_r+0x26>
 8006b0c:	d902      	bls.n	8006b14 <_free_r+0x78>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	6003      	str	r3, [r0, #0]
 8006b12:	e7d6      	b.n	8006ac2 <_free_r+0x26>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf04      	itt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	6063      	str	r3, [r4, #4]
 8006b22:	bf04      	itt	eq
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	6054      	str	r4, [r2, #4]
 8006b2a:	e7ca      	b.n	8006ac2 <_free_r+0x26>
 8006b2c:	b003      	add	sp, #12
 8006b2e:	bd30      	pop	{r4, r5, pc}
 8006b30:	20012ef0 	.word	0x20012ef0

08006b34 <_read_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d07      	ldr	r5, [pc, #28]	; (8006b54 <_read_r+0x20>)
 8006b38:	4604      	mov	r4, r0
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	602a      	str	r2, [r5, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7fa fbda 	bl	80012fc <_read>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_read_r+0x1e>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_read_r+0x1e>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20012ef8 	.word	0x20012ef8

08006b58 <_fstat_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	; (8006b78 <_fstat_r+0x20>)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f7fa fc0e 	bl	8001386 <_fstat>
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	d102      	bne.n	8006b74 <_fstat_r+0x1c>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b103      	cbz	r3, 8006b74 <_fstat_r+0x1c>
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
 8006b76:	bf00      	nop
 8006b78:	20012ef8 	.word	0x20012ef8

08006b7c <_isatty_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	; (8006b98 <_isatty_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa fc0d 	bl	80013a6 <_isatty>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_isatty_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_isatty_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	20012ef8 	.word	0x20012ef8

08006b9c <_sbrk>:
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <_sbrk+0x14>)
 8006b9e:	6811      	ldr	r1, [r2, #0]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	b909      	cbnz	r1, 8006ba8 <_sbrk+0xc>
 8006ba4:	4903      	ldr	r1, [pc, #12]	; (8006bb4 <_sbrk+0x18>)
 8006ba6:	6011      	str	r1, [r2, #0]
 8006ba8:	6810      	ldr	r0, [r2, #0]
 8006baa:	4403      	add	r3, r0
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	4770      	bx	lr
 8006bb0:	20012efc 	.word	0x20012efc
 8006bb4:	20012f00 	.word	0x20012f00

08006bb8 <_init>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_fini>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr
